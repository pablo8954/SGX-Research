// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace aesm {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_InitQuoteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_InitQuoteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetQuoteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetQuoteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetLaunchTokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetLaunchTokenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_ReportAttestationErrorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_ReportAttestationErrorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_CheckUpdateStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_CheckUpdateStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_CreateSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_CreateSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_InvokeServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_InvokeServiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_ExchangeReportRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_ExchangeReportRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_CloseSessionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_CloseSessionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetPsCapRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetPsCapRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetWhiteListSizeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetWhiteListSizeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetWhiteListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetWhiteListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_SGXGetExtendedEpidGroupIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_SGXGetExtendedEpidGroupIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_SGXSwitchExtendedEpidGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_SGXSwitchExtendedEpidGroupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_SGXRegisterRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_SGXRegisterRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_InitQuoteExRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_InitQuoteExRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_SelectAttKeyIDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_SelectAttKeyIDRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetQuoteSizeExRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetQuoteSizeExRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_GetQuoteExRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_GetQuoteExRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_InitQuoteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_InitQuoteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetQuoteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetQuoteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetLaunchTokenResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetLaunchTokenResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_ReportAttestationErrorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_ReportAttestationErrorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_CheckUpdateStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_CheckUpdateStatusResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_CreateSessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_CreateSessionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_InvokeServiceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_InvokeServiceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_ExchangeReportResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_ExchangeReportResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_CloseSessionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_CloseSessionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetPsCapResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetPsCapResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetWhiteListSizeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetWhiteListSizeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetWhiteListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetWhiteListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_SGXGetExtendedEpidGroupIdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_SGXGetExtendedEpidGroupIdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_SGXSwitchExtendedEpidGroupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_SGXSwitchExtendedEpidGroupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_SGXRegisterResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_SGXRegisterResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_SelectAttKeyIDResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_SelectAttKeyIDResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_InitQuoteExResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_InitQuoteExResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetQuoteSizeExResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetQuoteSizeExResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_GetQuoteExResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_GetQuoteExResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2eproto() {
  protobuf_AddDesc_messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, initquotereq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getquotereq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getlictokenreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, reporterrreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, createsessionreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, invokeservicereq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, exchangereportreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, closesessionreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getpscapreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getwhitelistsizereq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getwhitelistreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, sgxgetextendedepidgroupidreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, sgxswitchextendedepidgroupreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, sgxregisterreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, initquoteexreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getquotesizeexreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getquoteexreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, checkupdatestatusreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, selectattkeyidreq_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_InitQuoteRequest_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_InitQuoteRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InitQuoteRequest, timeout_),
  };
  Request_InitQuoteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_InitQuoteRequest_descriptor_,
      Request_InitQuoteRequest::default_instance_,
      Request_InitQuoteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InitQuoteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InitQuoteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_InitQuoteRequest));
  Request_GetQuoteRequest_descriptor_ = Request_descriptor_->nested_type(1);
  static const int Request_GetQuoteRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, quote_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, spid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, sig_rl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, buf_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, qe_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, timeout_),
  };
  Request_GetQuoteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetQuoteRequest_descriptor_,
      Request_GetQuoteRequest::default_instance_,
      Request_GetQuoteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetQuoteRequest));
  Request_GetLaunchTokenRequest_descriptor_ = Request_descriptor_->nested_type(2);
  static const int Request_GetLaunchTokenRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLaunchTokenRequest, mr_enclave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLaunchTokenRequest, mr_signer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLaunchTokenRequest, se_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLaunchTokenRequest, timeout_),
  };
  Request_GetLaunchTokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetLaunchTokenRequest_descriptor_,
      Request_GetLaunchTokenRequest::default_instance_,
      Request_GetLaunchTokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLaunchTokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetLaunchTokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetLaunchTokenRequest));
  Request_ReportAttestationErrorRequest_descriptor_ = Request_descriptor_->nested_type(3);
  static const int Request_ReportAttestationErrorRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ReportAttestationErrorRequest, platform_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ReportAttestationErrorRequest, attestation_error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ReportAttestationErrorRequest, update_info_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ReportAttestationErrorRequest, timeout_),
  };
  Request_ReportAttestationErrorRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_ReportAttestationErrorRequest_descriptor_,
      Request_ReportAttestationErrorRequest::default_instance_,
      Request_ReportAttestationErrorRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ReportAttestationErrorRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ReportAttestationErrorRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_ReportAttestationErrorRequest));
  Request_CheckUpdateStatusRequest_descriptor_ = Request_descriptor_->nested_type(4);
  static const int Request_CheckUpdateStatusRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CheckUpdateStatusRequest, platform_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CheckUpdateStatusRequest, update_info_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CheckUpdateStatusRequest, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CheckUpdateStatusRequest, timeout_),
  };
  Request_CheckUpdateStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_CheckUpdateStatusRequest_descriptor_,
      Request_CheckUpdateStatusRequest::default_instance_,
      Request_CheckUpdateStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CheckUpdateStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CheckUpdateStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_CheckUpdateStatusRequest));
  Request_CreateSessionRequest_descriptor_ = Request_descriptor_->nested_type(5);
  static const int Request_CreateSessionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CreateSessionRequest, dh_msg1_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CreateSessionRequest, timeout_),
  };
  Request_CreateSessionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_CreateSessionRequest_descriptor_,
      Request_CreateSessionRequest::default_instance_,
      Request_CreateSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CreateSessionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CreateSessionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_CreateSessionRequest));
  Request_InvokeServiceRequest_descriptor_ = Request_descriptor_->nested_type(6);
  static const int Request_InvokeServiceRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InvokeServiceRequest, pse_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InvokeServiceRequest, pse_resp_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InvokeServiceRequest, timeout_),
  };
  Request_InvokeServiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_InvokeServiceRequest_descriptor_,
      Request_InvokeServiceRequest::default_instance_,
      Request_InvokeServiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InvokeServiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InvokeServiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_InvokeServiceRequest));
  Request_ExchangeReportRequest_descriptor_ = Request_descriptor_->nested_type(7);
  static const int Request_ExchangeReportRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ExchangeReportRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ExchangeReportRequest, se_dh_msg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ExchangeReportRequest, se_dh_msg3_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ExchangeReportRequest, timeout_),
  };
  Request_ExchangeReportRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_ExchangeReportRequest_descriptor_,
      Request_ExchangeReportRequest::default_instance_,
      Request_ExchangeReportRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ExchangeReportRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ExchangeReportRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_ExchangeReportRequest));
  Request_CloseSessionRequest_descriptor_ = Request_descriptor_->nested_type(8);
  static const int Request_CloseSessionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CloseSessionRequest, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CloseSessionRequest, timeout_),
  };
  Request_CloseSessionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_CloseSessionRequest_descriptor_,
      Request_CloseSessionRequest::default_instance_,
      Request_CloseSessionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CloseSessionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_CloseSessionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_CloseSessionRequest));
  Request_GetPsCapRequest_descriptor_ = Request_descriptor_->nested_type(9);
  static const int Request_GetPsCapRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetPsCapRequest, timeout_),
  };
  Request_GetPsCapRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetPsCapRequest_descriptor_,
      Request_GetPsCapRequest::default_instance_,
      Request_GetPsCapRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetPsCapRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetPsCapRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetPsCapRequest));
  Request_GetWhiteListSizeRequest_descriptor_ = Request_descriptor_->nested_type(10);
  static const int Request_GetWhiteListSizeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetWhiteListSizeRequest, timeout_),
  };
  Request_GetWhiteListSizeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetWhiteListSizeRequest_descriptor_,
      Request_GetWhiteListSizeRequest::default_instance_,
      Request_GetWhiteListSizeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetWhiteListSizeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetWhiteListSizeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetWhiteListSizeRequest));
  Request_GetWhiteListRequest_descriptor_ = Request_descriptor_->nested_type(11);
  static const int Request_GetWhiteListRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetWhiteListRequest, white_list_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetWhiteListRequest, timeout_),
  };
  Request_GetWhiteListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetWhiteListRequest_descriptor_,
      Request_GetWhiteListRequest::default_instance_,
      Request_GetWhiteListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetWhiteListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetWhiteListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetWhiteListRequest));
  Request_SGXGetExtendedEpidGroupIdRequest_descriptor_ = Request_descriptor_->nested_type(12);
  static const int Request_SGXGetExtendedEpidGroupIdRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXGetExtendedEpidGroupIdRequest, timeout_),
  };
  Request_SGXGetExtendedEpidGroupIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_SGXGetExtendedEpidGroupIdRequest_descriptor_,
      Request_SGXGetExtendedEpidGroupIdRequest::default_instance_,
      Request_SGXGetExtendedEpidGroupIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXGetExtendedEpidGroupIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXGetExtendedEpidGroupIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_SGXGetExtendedEpidGroupIdRequest));
  Request_SGXSwitchExtendedEpidGroupRequest_descriptor_ = Request_descriptor_->nested_type(13);
  static const int Request_SGXSwitchExtendedEpidGroupRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXSwitchExtendedEpidGroupRequest, x_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXSwitchExtendedEpidGroupRequest, timeout_),
  };
  Request_SGXSwitchExtendedEpidGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_SGXSwitchExtendedEpidGroupRequest_descriptor_,
      Request_SGXSwitchExtendedEpidGroupRequest::default_instance_,
      Request_SGXSwitchExtendedEpidGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXSwitchExtendedEpidGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXSwitchExtendedEpidGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_SGXSwitchExtendedEpidGroupRequest));
  Request_SGXRegisterRequest_descriptor_ = Request_descriptor_->nested_type(14);
  static const int Request_SGXRegisterRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXRegisterRequest, buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXRegisterRequest, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXRegisterRequest, timeout_),
  };
  Request_SGXRegisterRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_SGXRegisterRequest_descriptor_,
      Request_SGXRegisterRequest::default_instance_,
      Request_SGXRegisterRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXRegisterRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SGXRegisterRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_SGXRegisterRequest));
  Request_InitQuoteExRequest_descriptor_ = Request_descriptor_->nested_type(15);
  static const int Request_InitQuoteExRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InitQuoteExRequest, att_key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InitQuoteExRequest, b_pub_key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InitQuoteExRequest, buf_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InitQuoteExRequest, timeout_),
  };
  Request_InitQuoteExRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_InitQuoteExRequest_descriptor_,
      Request_InitQuoteExRequest::default_instance_,
      Request_InitQuoteExRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InitQuoteExRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_InitQuoteExRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_InitQuoteExRequest));
  Request_SelectAttKeyIDRequest_descriptor_ = Request_descriptor_->nested_type(16);
  static const int Request_SelectAttKeyIDRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SelectAttKeyIDRequest, att_key_id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SelectAttKeyIDRequest, timeout_),
  };
  Request_SelectAttKeyIDRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_SelectAttKeyIDRequest_descriptor_,
      Request_SelectAttKeyIDRequest::default_instance_,
      Request_SelectAttKeyIDRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SelectAttKeyIDRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_SelectAttKeyIDRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_SelectAttKeyIDRequest));
  Request_GetQuoteSizeExRequest_descriptor_ = Request_descriptor_->nested_type(17);
  static const int Request_GetQuoteSizeExRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteSizeExRequest, att_key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteSizeExRequest, timeout_),
  };
  Request_GetQuoteSizeExRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetQuoteSizeExRequest_descriptor_,
      Request_GetQuoteSizeExRequest::default_instance_,
      Request_GetQuoteSizeExRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteSizeExRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteSizeExRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetQuoteSizeExRequest));
  Request_GetQuoteExRequest_descriptor_ = Request_descriptor_->nested_type(18);
  static const int Request_GetQuoteExRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteExRequest, report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteExRequest, att_key_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteExRequest, qe_report_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteExRequest, buf_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteExRequest, timeout_),
  };
  Request_GetQuoteExRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_GetQuoteExRequest_descriptor_,
      Request_GetQuoteExRequest::default_instance_,
      Request_GetQuoteExRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteExRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_GetQuoteExRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_GetQuoteExRequest));
  Response_descriptor_ = file->message_type(1);
  static const int Response_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, initquoteres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, getquoteres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, getlictokenres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, reporterrres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, createsessionres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, invokeserviceres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, exchangereportres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, closesessionres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, getpscapres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, getwhitelistsizeres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, getwhitelistres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, sgxgetextendedepidgroupidres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, sgxswitchextendedepidgroupres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, sgxregisterres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, initquoteexres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, getquotesizeexres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, getquoteexres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, checkupdatestatusres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, selectattkeyidres_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  Response_InitQuoteResponse_descriptor_ = Response_descriptor_->nested_type(0);
  static const int Response_InitQuoteResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteResponse, targetinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteResponse, gid_),
  };
  Response_InitQuoteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_InitQuoteResponse_descriptor_,
      Response_InitQuoteResponse::default_instance_,
      Response_InitQuoteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_InitQuoteResponse));
  Response_GetQuoteResponse_descriptor_ = Response_descriptor_->nested_type(1);
  static const int Response_GetQuoteResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteResponse, quote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteResponse, qe_report_),
  };
  Response_GetQuoteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetQuoteResponse_descriptor_,
      Response_GetQuoteResponse::default_instance_,
      Response_GetQuoteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetQuoteResponse));
  Response_GetLaunchTokenResponse_descriptor_ = Response_descriptor_->nested_type(2);
  static const int Response_GetLaunchTokenResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetLaunchTokenResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetLaunchTokenResponse, token_),
  };
  Response_GetLaunchTokenResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetLaunchTokenResponse_descriptor_,
      Response_GetLaunchTokenResponse::default_instance_,
      Response_GetLaunchTokenResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetLaunchTokenResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetLaunchTokenResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetLaunchTokenResponse));
  Response_ReportAttestationErrorResponse_descriptor_ = Response_descriptor_->nested_type(3);
  static const int Response_ReportAttestationErrorResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ReportAttestationErrorResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ReportAttestationErrorResponse, platform_update_info_),
  };
  Response_ReportAttestationErrorResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_ReportAttestationErrorResponse_descriptor_,
      Response_ReportAttestationErrorResponse::default_instance_,
      Response_ReportAttestationErrorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ReportAttestationErrorResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ReportAttestationErrorResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_ReportAttestationErrorResponse));
  Response_CheckUpdateStatusResponse_descriptor_ = Response_descriptor_->nested_type(4);
  static const int Response_CheckUpdateStatusResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CheckUpdateStatusResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CheckUpdateStatusResponse, platform_update_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CheckUpdateStatusResponse, status_),
  };
  Response_CheckUpdateStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_CheckUpdateStatusResponse_descriptor_,
      Response_CheckUpdateStatusResponse::default_instance_,
      Response_CheckUpdateStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CheckUpdateStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CheckUpdateStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_CheckUpdateStatusResponse));
  Response_CreateSessionResponse_descriptor_ = Response_descriptor_->nested_type(5);
  static const int Response_CreateSessionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CreateSessionResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CreateSessionResponse, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CreateSessionResponse, se_dh_msg1_),
  };
  Response_CreateSessionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_CreateSessionResponse_descriptor_,
      Response_CreateSessionResponse::default_instance_,
      Response_CreateSessionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CreateSessionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CreateSessionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_CreateSessionResponse));
  Response_InvokeServiceResponse_descriptor_ = Response_descriptor_->nested_type(6);
  static const int Response_InvokeServiceResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InvokeServiceResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InvokeServiceResponse, pse_message_),
  };
  Response_InvokeServiceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_InvokeServiceResponse_descriptor_,
      Response_InvokeServiceResponse::default_instance_,
      Response_InvokeServiceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InvokeServiceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InvokeServiceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_InvokeServiceResponse));
  Response_ExchangeReportResponse_descriptor_ = Response_descriptor_->nested_type(7);
  static const int Response_ExchangeReportResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ExchangeReportResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ExchangeReportResponse, se_dh_msg3_),
  };
  Response_ExchangeReportResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_ExchangeReportResponse_descriptor_,
      Response_ExchangeReportResponse::default_instance_,
      Response_ExchangeReportResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ExchangeReportResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_ExchangeReportResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_ExchangeReportResponse));
  Response_CloseSessionResponse_descriptor_ = Response_descriptor_->nested_type(8);
  static const int Response_CloseSessionResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CloseSessionResponse, errorcode_),
  };
  Response_CloseSessionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_CloseSessionResponse_descriptor_,
      Response_CloseSessionResponse::default_instance_,
      Response_CloseSessionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CloseSessionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_CloseSessionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_CloseSessionResponse));
  Response_GetPsCapResponse_descriptor_ = Response_descriptor_->nested_type(9);
  static const int Response_GetPsCapResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetPsCapResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetPsCapResponse, ps_cap_),
  };
  Response_GetPsCapResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetPsCapResponse_descriptor_,
      Response_GetPsCapResponse::default_instance_,
      Response_GetPsCapResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetPsCapResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetPsCapResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetPsCapResponse));
  Response_GetWhiteListSizeResponse_descriptor_ = Response_descriptor_->nested_type(10);
  static const int Response_GetWhiteListSizeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListSizeResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListSizeResponse, white_list_size_),
  };
  Response_GetWhiteListSizeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetWhiteListSizeResponse_descriptor_,
      Response_GetWhiteListSizeResponse::default_instance_,
      Response_GetWhiteListSizeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListSizeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListSizeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetWhiteListSizeResponse));
  Response_GetWhiteListResponse_descriptor_ = Response_descriptor_->nested_type(11);
  static const int Response_GetWhiteListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListResponse, white_list_),
  };
  Response_GetWhiteListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetWhiteListResponse_descriptor_,
      Response_GetWhiteListResponse::default_instance_,
      Response_GetWhiteListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetWhiteListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetWhiteListResponse));
  Response_SGXGetExtendedEpidGroupIdResponse_descriptor_ = Response_descriptor_->nested_type(12);
  static const int Response_SGXGetExtendedEpidGroupIdResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXGetExtendedEpidGroupIdResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXGetExtendedEpidGroupIdResponse, x_group_id_),
  };
  Response_SGXGetExtendedEpidGroupIdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_SGXGetExtendedEpidGroupIdResponse_descriptor_,
      Response_SGXGetExtendedEpidGroupIdResponse::default_instance_,
      Response_SGXGetExtendedEpidGroupIdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXGetExtendedEpidGroupIdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXGetExtendedEpidGroupIdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_SGXGetExtendedEpidGroupIdResponse));
  Response_SGXSwitchExtendedEpidGroupResponse_descriptor_ = Response_descriptor_->nested_type(13);
  static const int Response_SGXSwitchExtendedEpidGroupResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXSwitchExtendedEpidGroupResponse, errorcode_),
  };
  Response_SGXSwitchExtendedEpidGroupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_SGXSwitchExtendedEpidGroupResponse_descriptor_,
      Response_SGXSwitchExtendedEpidGroupResponse::default_instance_,
      Response_SGXSwitchExtendedEpidGroupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXSwitchExtendedEpidGroupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXSwitchExtendedEpidGroupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_SGXSwitchExtendedEpidGroupResponse));
  Response_SGXRegisterResponse_descriptor_ = Response_descriptor_->nested_type(14);
  static const int Response_SGXRegisterResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXRegisterResponse, errorcode_),
  };
  Response_SGXRegisterResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_SGXRegisterResponse_descriptor_,
      Response_SGXRegisterResponse::default_instance_,
      Response_SGXRegisterResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXRegisterResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SGXRegisterResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_SGXRegisterResponse));
  Response_SelectAttKeyIDResponse_descriptor_ = Response_descriptor_->nested_type(15);
  static const int Response_SelectAttKeyIDResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SelectAttKeyIDResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SelectAttKeyIDResponse, selected_att_key_id_),
  };
  Response_SelectAttKeyIDResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_SelectAttKeyIDResponse_descriptor_,
      Response_SelectAttKeyIDResponse::default_instance_,
      Response_SelectAttKeyIDResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SelectAttKeyIDResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_SelectAttKeyIDResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_SelectAttKeyIDResponse));
  Response_InitQuoteExResponse_descriptor_ = Response_descriptor_->nested_type(16);
  static const int Response_InitQuoteExResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteExResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteExResponse, target_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteExResponse, pub_key_id_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteExResponse, pub_key_id_),
  };
  Response_InitQuoteExResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_InitQuoteExResponse_descriptor_,
      Response_InitQuoteExResponse::default_instance_,
      Response_InitQuoteExResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteExResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_InitQuoteExResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_InitQuoteExResponse));
  Response_GetQuoteSizeExResponse_descriptor_ = Response_descriptor_->nested_type(17);
  static const int Response_GetQuoteSizeExResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteSizeExResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteSizeExResponse, quote_size_),
  };
  Response_GetQuoteSizeExResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetQuoteSizeExResponse_descriptor_,
      Response_GetQuoteSizeExResponse::default_instance_,
      Response_GetQuoteSizeExResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteSizeExResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteSizeExResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetQuoteSizeExResponse));
  Response_GetQuoteExResponse_descriptor_ = Response_descriptor_->nested_type(18);
  static const int Response_GetQuoteExResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteExResponse, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteExResponse, quote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteExResponse, qe_report_info_),
  };
  Response_GetQuoteExResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_GetQuoteExResponse_descriptor_,
      Response_GetQuoteExResponse::default_instance_,
      Response_GetQuoteExResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteExResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response_GetQuoteExResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response_GetQuoteExResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_InitQuoteRequest_descriptor_, &Request_InitQuoteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetQuoteRequest_descriptor_, &Request_GetQuoteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetLaunchTokenRequest_descriptor_, &Request_GetLaunchTokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_ReportAttestationErrorRequest_descriptor_, &Request_ReportAttestationErrorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_CheckUpdateStatusRequest_descriptor_, &Request_CheckUpdateStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_CreateSessionRequest_descriptor_, &Request_CreateSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_InvokeServiceRequest_descriptor_, &Request_InvokeServiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_ExchangeReportRequest_descriptor_, &Request_ExchangeReportRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_CloseSessionRequest_descriptor_, &Request_CloseSessionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetPsCapRequest_descriptor_, &Request_GetPsCapRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetWhiteListSizeRequest_descriptor_, &Request_GetWhiteListSizeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetWhiteListRequest_descriptor_, &Request_GetWhiteListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_SGXGetExtendedEpidGroupIdRequest_descriptor_, &Request_SGXGetExtendedEpidGroupIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_SGXSwitchExtendedEpidGroupRequest_descriptor_, &Request_SGXSwitchExtendedEpidGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_SGXRegisterRequest_descriptor_, &Request_SGXRegisterRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_InitQuoteExRequest_descriptor_, &Request_InitQuoteExRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_SelectAttKeyIDRequest_descriptor_, &Request_SelectAttKeyIDRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetQuoteSizeExRequest_descriptor_, &Request_GetQuoteSizeExRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_GetQuoteExRequest_descriptor_, &Request_GetQuoteExRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_InitQuoteResponse_descriptor_, &Response_InitQuoteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetQuoteResponse_descriptor_, &Response_GetQuoteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetLaunchTokenResponse_descriptor_, &Response_GetLaunchTokenResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_ReportAttestationErrorResponse_descriptor_, &Response_ReportAttestationErrorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_CheckUpdateStatusResponse_descriptor_, &Response_CheckUpdateStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_CreateSessionResponse_descriptor_, &Response_CreateSessionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_InvokeServiceResponse_descriptor_, &Response_InvokeServiceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_ExchangeReportResponse_descriptor_, &Response_ExchangeReportResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_CloseSessionResponse_descriptor_, &Response_CloseSessionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetPsCapResponse_descriptor_, &Response_GetPsCapResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetWhiteListSizeResponse_descriptor_, &Response_GetWhiteListSizeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetWhiteListResponse_descriptor_, &Response_GetWhiteListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_SGXGetExtendedEpidGroupIdResponse_descriptor_, &Response_SGXGetExtendedEpidGroupIdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_SGXSwitchExtendedEpidGroupResponse_descriptor_, &Response_SGXSwitchExtendedEpidGroupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_SGXRegisterResponse_descriptor_, &Response_SGXRegisterResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_SelectAttKeyIDResponse_descriptor_, &Response_SelectAttKeyIDResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_InitQuoteExResponse_descriptor_, &Response_InitQuoteExResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetQuoteSizeExResponse_descriptor_, &Response_GetQuoteSizeExResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_GetQuoteExResponse_descriptor_, &Response_GetQuoteExResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Request_InitQuoteRequest::default_instance_;
  delete Request_InitQuoteRequest_reflection_;
  delete Request_GetQuoteRequest::default_instance_;
  delete Request_GetQuoteRequest_reflection_;
  delete Request_GetLaunchTokenRequest::default_instance_;
  delete Request_GetLaunchTokenRequest_reflection_;
  delete Request_ReportAttestationErrorRequest::default_instance_;
  delete Request_ReportAttestationErrorRequest_reflection_;
  delete Request_CheckUpdateStatusRequest::default_instance_;
  delete Request_CheckUpdateStatusRequest_reflection_;
  delete Request_CreateSessionRequest::default_instance_;
  delete Request_CreateSessionRequest_reflection_;
  delete Request_InvokeServiceRequest::default_instance_;
  delete Request_InvokeServiceRequest_reflection_;
  delete Request_ExchangeReportRequest::default_instance_;
  delete Request_ExchangeReportRequest_reflection_;
  delete Request_CloseSessionRequest::default_instance_;
  delete Request_CloseSessionRequest_reflection_;
  delete Request_GetPsCapRequest::default_instance_;
  delete Request_GetPsCapRequest_reflection_;
  delete Request_GetWhiteListSizeRequest::default_instance_;
  delete Request_GetWhiteListSizeRequest_reflection_;
  delete Request_GetWhiteListRequest::default_instance_;
  delete Request_GetWhiteListRequest_reflection_;
  delete Request_SGXGetExtendedEpidGroupIdRequest::default_instance_;
  delete Request_SGXGetExtendedEpidGroupIdRequest_reflection_;
  delete Request_SGXSwitchExtendedEpidGroupRequest::default_instance_;
  delete Request_SGXSwitchExtendedEpidGroupRequest_reflection_;
  delete Request_SGXRegisterRequest::default_instance_;
  delete Request_SGXRegisterRequest_reflection_;
  delete Request_InitQuoteExRequest::default_instance_;
  delete Request_InitQuoteExRequest_reflection_;
  delete Request_SelectAttKeyIDRequest::default_instance_;
  delete Request_SelectAttKeyIDRequest_reflection_;
  delete Request_GetQuoteSizeExRequest::default_instance_;
  delete Request_GetQuoteSizeExRequest_reflection_;
  delete Request_GetQuoteExRequest::default_instance_;
  delete Request_GetQuoteExRequest_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete Response_InitQuoteResponse::default_instance_;
  delete Response_InitQuoteResponse_reflection_;
  delete Response_GetQuoteResponse::default_instance_;
  delete Response_GetQuoteResponse_reflection_;
  delete Response_GetLaunchTokenResponse::default_instance_;
  delete Response_GetLaunchTokenResponse_reflection_;
  delete Response_ReportAttestationErrorResponse::default_instance_;
  delete Response_ReportAttestationErrorResponse_reflection_;
  delete Response_CheckUpdateStatusResponse::default_instance_;
  delete Response_CheckUpdateStatusResponse_reflection_;
  delete Response_CreateSessionResponse::default_instance_;
  delete Response_CreateSessionResponse_reflection_;
  delete Response_InvokeServiceResponse::default_instance_;
  delete Response_InvokeServiceResponse_reflection_;
  delete Response_ExchangeReportResponse::default_instance_;
  delete Response_ExchangeReportResponse_reflection_;
  delete Response_CloseSessionResponse::default_instance_;
  delete Response_CloseSessionResponse_reflection_;
  delete Response_GetPsCapResponse::default_instance_;
  delete Response_GetPsCapResponse_reflection_;
  delete Response_GetWhiteListSizeResponse::default_instance_;
  delete Response_GetWhiteListSizeResponse_reflection_;
  delete Response_GetWhiteListResponse::default_instance_;
  delete Response_GetWhiteListResponse_reflection_;
  delete Response_SGXGetExtendedEpidGroupIdResponse::default_instance_;
  delete Response_SGXGetExtendedEpidGroupIdResponse_reflection_;
  delete Response_SGXSwitchExtendedEpidGroupResponse::default_instance_;
  delete Response_SGXSwitchExtendedEpidGroupResponse_reflection_;
  delete Response_SGXRegisterResponse::default_instance_;
  delete Response_SGXRegisterResponse_reflection_;
  delete Response_SelectAttKeyIDResponse::default_instance_;
  delete Response_SelectAttKeyIDResponse_reflection_;
  delete Response_InitQuoteExResponse::default_instance_;
  delete Response_InitQuoteExResponse_reflection_;
  delete Response_GetQuoteSizeExResponse::default_instance_;
  delete Response_GetQuoteSizeExResponse_reflection_;
  delete Response_GetQuoteExResponse::default_instance_;
  delete Response_GetQuoteExResponse_reflection_;
}

void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016messages.proto\022\014aesm.message\"\333\026\n\007Reque"
    "st\022<\n\014initQuoteReq\030\001 \001(\0132&.aesm.message."
    "Request.InitQuoteRequest\022:\n\013getQuoteReq\030"
    "\002 \001(\0132%.aesm.message.Request.GetQuoteReq"
    "uest\022C\n\016getLicTokenReq\030\003 \001(\0132+.aesm.mess"
    "age.Request.GetLaunchTokenRequest\022I\n\014rep"
    "ortErrReq\030\004 \001(\01323.aesm.message.Request.R"
    "eportAttestationErrorRequest\022D\n\020createSe"
    "ssionReq\030\005 \001(\0132*.aesm.message.Request.Cr"
    "eateSessionRequest\022D\n\020invokeServiceReq\030\006"
    " \001(\0132*.aesm.message.Request.InvokeServic"
    "eRequest\022F\n\021exchangeReportReq\030\007 \001(\0132+.ae"
    "sm.message.Request.ExchangeReportRequest"
    "\022B\n\017closeSessionReq\030\010 \001(\0132).aesm.message"
    ".Request.CloseSessionRequest\022:\n\013getPsCap"
    "Req\030\t \001(\0132%.aesm.message.Request.GetPsCa"
    "pRequest\022J\n\023getWhiteListSizeReq\030\n \001(\0132-."
    "aesm.message.Request.GetWhiteListSizeReq"
    "uest\022B\n\017getWhiteListReq\030\013 \001(\0132).aesm.mes"
    "sage.Request.GetWhiteListRequest\022\\\n\034sgxG"
    "etExtendedEpidGroupIdReq\030\014 \001(\01326.aesm.me"
    "ssage.Request.SGXGetExtendedEpidGroupIdR"
    "equest\022^\n\035sgxSwitchExtendedEpidGroupReq\030"
    "\r \001(\01327.aesm.message.Request.SGXSwitchEx"
    "tendedEpidGroupRequest\022@\n\016sgxRegisterReq"
    "\030\016 \001(\0132(.aesm.message.Request.SGXRegiste"
    "rRequest\022@\n\016initQuoteExReq\030\017 \001(\0132(.aesm."
    "message.Request.InitQuoteExRequest\022F\n\021ge"
    "tQuoteSizeExReq\030\020 \001(\0132+.aesm.message.Req"
    "uest.GetQuoteSizeExRequest\022>\n\rgetQuoteEx"
    "Req\030\021 \001(\0132\'.aesm.message.Request.GetQuot"
    "eExRequest\022L\n\024checkUpdateStatusReq\030\022 \001(\013"
    "2..aesm.message.Request.CheckUpdateStatu"
    "sRequest\022F\n\021selectAttKeyIDReq\030\023 \001(\0132+.ae"
    "sm.message.Request.SelectAttKeyIDRequest"
    "\032#\n\020InitQuoteRequest\022\017\n\007timeout\030\t \001(\r\032\230\001"
    "\n\017GetQuoteRequest\022\016\n\006report\030\001 \002(\014\022\022\n\nquo"
    "te_type\030\002 \002(\r\022\014\n\004spid\030\003 \002(\014\022\r\n\005nonce\030\004 \001"
    "(\014\022\016\n\006sig_rl\030\005 \001(\014\022\020\n\010buf_size\030\006 \002(\r\022\021\n\t"
    "qe_report\030\007 \001(\010\022\017\n\007timeout\030\t \001(\r\032f\n\025GetL"
    "aunchTokenRequest\022\022\n\nmr_enclave\030\001 \002(\014\022\021\n"
    "\tmr_signer\030\002 \002(\014\022\025\n\rse_attributes\030\003 \002(\014\022"
    "\017\n\007timeout\030\t \001(\r\032\201\001\n\035ReportAttestationEr"
    "rorRequest\022\025\n\rplatform_info\030\001 \002(\014\022\036\n\026att"
    "estation_error_code\030\002 \002(\r\022\030\n\020update_info"
    "_size\030\003 \002(\r\022\017\n\007timeout\030\t \001(\r\032l\n\030CheckUpd"
    "ateStatusRequest\022\025\n\rplatform_info\030\001 \001(\014\022"
    "\030\n\020update_info_size\030\002 \002(\r\022\016\n\006config\030\003 \002("
    "\r\022\017\n\007timeout\030\t \001(\r\032=\n\024CreateSessionReque"
    "st\022\024\n\014dh_msg1_size\030\001 \002(\r\022\017\n\007timeout\030\t \001("
    "\r\032S\n\024InvokeServiceRequest\022\023\n\013pse_message"
    "\030\001 \002(\014\022\025\n\rpse_resp_size\030\002 \002(\r\022\017\n\007timeout"
    "\030\t \001(\r\032i\n\025ExchangeReportRequest\022\022\n\nsessi"
    "on_id\030\001 \002(\r\022\022\n\nse_dh_msg2\030\002 \002(\014\022\027\n\017se_dh"
    "_msg3_size\030\003 \002(\r\022\017\n\007timeout\030\t \001(\r\032:\n\023Clo"
    "seSessionRequest\022\022\n\nsession_id\030\001 \002(\r\022\017\n\007"
    "timeout\030\t \001(\r\032\"\n\017GetPsCapRequest\022\017\n\007time"
    "out\030\t \001(\r\032*\n\027GetWhiteListSizeRequest\022\017\n\007"
    "timeout\030\t \001(\r\032\?\n\023GetWhiteListRequest\022\027\n\017"
    "white_list_size\030\001 \001(\r\022\017\n\007timeout\030\t \001(\r\0323"
    "\n SGXGetExtendedEpidGroupIdRequest\022\017\n\007ti"
    "meout\030\t \001(\r\032H\n!SGXSwitchExtendedEpidGrou"
    "pRequest\022\022\n\nx_group_id\030\001 \001(\r\022\017\n\007timeout\030"
    "\t \001(\r\032E\n\022SGXRegisterRequest\022\013\n\003buf\030\001 \002(\014"
    "\022\021\n\tdata_type\030\002 \002(\r\022\017\n\007timeout\030\t \001(\r\032a\n\022"
    "InitQuoteExRequest\022\022\n\natt_key_id\030\001 \001(\014\022\024"
    "\n\014b_pub_key_id\030\003 \002(\010\022\020\n\010buf_size\030\004 \001(\004\022\017"
    "\n\007timeout\030\t \001(\r\032A\n\025SelectAttKeyIDRequest"
    "\022\027\n\017att_key_id_list\030\001 \001(\014\022\017\n\007timeout\030\002 \001"
    "(\r\032<\n\025GetQuoteSizeExRequest\022\022\n\natt_key_i"
    "d\030\001 \001(\014\022\017\n\007timeout\030\t \001(\r\032r\n\021GetQuoteExRe"
    "quest\022\016\n\006report\030\001 \002(\014\022\022\n\natt_key_id\030\002 \001("
    "\014\022\026\n\016qe_report_info\030\003 \001(\014\022\020\n\010buf_size\030\004 "
    "\002(\r\022\017\n\007timeout\030\t \001(\r\"\353\025\n\010Response\022>\n\014ini"
    "tQuoteRes\030\001 \001(\0132(.aesm.message.Response."
    "InitQuoteResponse\022<\n\013getQuoteRes\030\002 \001(\0132\'"
    ".aesm.message.Response.GetQuoteResponse\022"
    "E\n\016getLicTokenRes\030\003 \001(\0132-.aesm.message.R"
    "esponse.GetLaunchTokenResponse\022K\n\014report"
    "ErrRes\030\004 \001(\01325.aesm.message.Response.Rep"
    "ortAttestationErrorResponse\022F\n\020createSes"
    "sionRes\030\005 \001(\0132,.aesm.message.Response.Cr"
    "eateSessionResponse\022F\n\020invokeServiceRes\030"
    "\006 \001(\0132,.aesm.message.Response.InvokeServ"
    "iceResponse\022H\n\021exchangeReportRes\030\007 \001(\0132-"
    ".aesm.message.Response.ExchangeReportRes"
    "ponse\022D\n\017closeSessionRes\030\010 \001(\0132+.aesm.me"
    "ssage.Response.CloseSessionResponse\022<\n\013g"
    "etPsCapRes\030\t \001(\0132\'.aesm.message.Response"
    ".GetPsCapResponse\022L\n\023getWhiteListSizeRes"
    "\030\n \001(\0132/.aesm.message.Response.GetWhiteL"
    "istSizeResponse\022D\n\017getWhiteListRes\030\013 \001(\013"
    "2+.aesm.message.Response.GetWhiteListRes"
    "ponse\022^\n\034sgxGetExtendedEpidGroupIdRes\030\014 "
    "\001(\01328.aesm.message.Response.SGXGetExtend"
    "edEpidGroupIdResponse\022`\n\035sgxSwitchExtend"
    "edEpidGroupRes\030\r \001(\01329.aesm.message.Resp"
    "onse.SGXSwitchExtendedEpidGroupResponse\022"
    "B\n\016sgxRegisterRes\030\016 \001(\0132*.aesm.message.R"
    "esponse.SGXRegisterResponse\022B\n\016initQuote"
    "ExRes\030\017 \001(\0132*.aesm.message.Response.Init"
    "QuoteExResponse\022H\n\021getQuoteSizeExRes\030\020 \001"
    "(\0132-.aesm.message.Response.GetQuoteSizeE"
    "xResponse\022@\n\rgetQuoteExRes\030\021 \001(\0132).aesm."
    "message.Response.GetQuoteExResponse\022N\n\024c"
    "heckUpdateStatusRes\030\022 \001(\01320.aesm.message"
    ".Response.CheckUpdateStatusResponse\022H\n\021s"
    "electAttKeyIDRes\030\023 \001(\0132-.aesm.message.Re"
    "sponse.SelectAttKeyIDResponse\032J\n\021InitQuo"
    "teResponse\022\024\n\terrorCode\030\001 \002(\r:\0011\022\022\n\ntarg"
    "etInfo\030\002 \001(\014\022\013\n\003gid\030\003 \001(\014\032J\n\020GetQuoteRes"
    "ponse\022\024\n\terrorCode\030\001 \002(\r:\0011\022\r\n\005quote\030\002 \001"
    "(\014\022\021\n\tqe_report\030\003 \001(\014\032=\n\026GetLaunchTokenR"
    "esponse\022\024\n\terrorCode\030\001 \002(\r:\0011\022\r\n\005token\030\002"
    " \001(\014\032T\n\036ReportAttestationErrorResponse\022\024"
    "\n\terrorCode\030\001 \002(\r:\0011\022\034\n\024platform_update_"
    "info\030\002 \001(\014\032_\n\031CheckUpdateStatusResponse\022"
    "\024\n\terrorCode\030\001 \002(\r:\0011\022\034\n\024platform_update"
    "_info\030\002 \001(\014\022\016\n\006status\030\003 \001(\r\032U\n\025CreateSes"
    "sionResponse\022\024\n\terrorCode\030\001 \002(\r:\0011\022\022\n\nse"
    "ssion_id\030\002 \001(\r\022\022\n\nse_dh_msg1\030\003 \001(\014\032B\n\025In"
    "vokeServiceResponse\022\024\n\terrorCode\030\001 \002(\r:\001"
    "1\022\023\n\013pse_message\030\002 \001(\014\032B\n\026ExchangeReport"
    "Response\022\024\n\terrorCode\030\001 \002(\r:\0011\022\022\n\nse_dh_"
    "msg3\030\002 \001(\014\032,\n\024CloseSessionResponse\022\024\n\ter"
    "rorCode\030\001 \002(\r:\0011\0328\n\020GetPsCapResponse\022\024\n\t"
    "errorCode\030\001 \002(\r:\0011\022\016\n\006ps_cap\030\002 \001(\004\032I\n\030Ge"
    "tWhiteListSizeResponse\022\024\n\terrorCode\030\001 \002("
    "\r:\0011\022\027\n\017white_list_size\030\002 \001(\r\032@\n\024GetWhit"
    "eListResponse\022\024\n\terrorCode\030\001 \002(\r:\0011\022\022\n\nw"
    "hite_list\030\002 \001(\014\032M\n!SGXGetExtendedEpidGro"
    "upIdResponse\022\024\n\terrorCode\030\001 \002(\r:\0011\022\022\n\nx_"
    "group_id\030\002 \001(\r\032:\n\"SGXSwitchExtendedEpidG"
    "roupResponse\022\024\n\terrorCode\030\001 \002(\r:\0011\032+\n\023SG"
    "XRegisterResponse\022\024\n\terrorCode\030\001 \002(\r:\0011\032"
    "K\n\026SelectAttKeyIDResponse\022\024\n\terrorCode\030\001"
    " \002(\r:\0011\022\033\n\023selected_att_key_id\030\002 \001(\014\032m\n\023"
    "InitQuoteExResponse\022\024\n\terrorCode\030\001 \002(\r:\001"
    "1\022\023\n\013target_info\030\002 \001(\014\022\027\n\017pub_key_id_siz"
    "e\030\003 \001(\004\022\022\n\npub_key_id\030\004 \001(\014\032B\n\026GetQuoteS"
    "izeExResponse\022\024\n\terrorCode\030\001 \002(\r:\0011\022\022\n\nq"
    "uote_size\030\002 \001(\r\032Q\n\022GetQuoteExResponse\022\024\n"
    "\terrorCode\030\001 \002(\r:\0011\022\r\n\005quote\030\002 \001(\014\022\026\n\016qe"
    "_report_info\030\003 \001(\014", 5738);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Request_InitQuoteRequest::default_instance_ = new Request_InitQuoteRequest();
  Request_GetQuoteRequest::default_instance_ = new Request_GetQuoteRequest();
  Request_GetLaunchTokenRequest::default_instance_ = new Request_GetLaunchTokenRequest();
  Request_ReportAttestationErrorRequest::default_instance_ = new Request_ReportAttestationErrorRequest();
  Request_CheckUpdateStatusRequest::default_instance_ = new Request_CheckUpdateStatusRequest();
  Request_CreateSessionRequest::default_instance_ = new Request_CreateSessionRequest();
  Request_InvokeServiceRequest::default_instance_ = new Request_InvokeServiceRequest();
  Request_ExchangeReportRequest::default_instance_ = new Request_ExchangeReportRequest();
  Request_CloseSessionRequest::default_instance_ = new Request_CloseSessionRequest();
  Request_GetPsCapRequest::default_instance_ = new Request_GetPsCapRequest();
  Request_GetWhiteListSizeRequest::default_instance_ = new Request_GetWhiteListSizeRequest();
  Request_GetWhiteListRequest::default_instance_ = new Request_GetWhiteListRequest();
  Request_SGXGetExtendedEpidGroupIdRequest::default_instance_ = new Request_SGXGetExtendedEpidGroupIdRequest();
  Request_SGXSwitchExtendedEpidGroupRequest::default_instance_ = new Request_SGXSwitchExtendedEpidGroupRequest();
  Request_SGXRegisterRequest::default_instance_ = new Request_SGXRegisterRequest();
  Request_InitQuoteExRequest::default_instance_ = new Request_InitQuoteExRequest();
  Request_SelectAttKeyIDRequest::default_instance_ = new Request_SelectAttKeyIDRequest();
  Request_GetQuoteSizeExRequest::default_instance_ = new Request_GetQuoteSizeExRequest();
  Request_GetQuoteExRequest::default_instance_ = new Request_GetQuoteExRequest();
  Response::default_instance_ = new Response();
  Response_InitQuoteResponse::default_instance_ = new Response_InitQuoteResponse();
  Response_GetQuoteResponse::default_instance_ = new Response_GetQuoteResponse();
  Response_GetLaunchTokenResponse::default_instance_ = new Response_GetLaunchTokenResponse();
  Response_ReportAttestationErrorResponse::default_instance_ = new Response_ReportAttestationErrorResponse();
  Response_CheckUpdateStatusResponse::default_instance_ = new Response_CheckUpdateStatusResponse();
  Response_CreateSessionResponse::default_instance_ = new Response_CreateSessionResponse();
  Response_InvokeServiceResponse::default_instance_ = new Response_InvokeServiceResponse();
  Response_ExchangeReportResponse::default_instance_ = new Response_ExchangeReportResponse();
  Response_CloseSessionResponse::default_instance_ = new Response_CloseSessionResponse();
  Response_GetPsCapResponse::default_instance_ = new Response_GetPsCapResponse();
  Response_GetWhiteListSizeResponse::default_instance_ = new Response_GetWhiteListSizeResponse();
  Response_GetWhiteListResponse::default_instance_ = new Response_GetWhiteListResponse();
  Response_SGXGetExtendedEpidGroupIdResponse::default_instance_ = new Response_SGXGetExtendedEpidGroupIdResponse();
  Response_SGXSwitchExtendedEpidGroupResponse::default_instance_ = new Response_SGXSwitchExtendedEpidGroupResponse();
  Response_SGXRegisterResponse::default_instance_ = new Response_SGXRegisterResponse();
  Response_SelectAttKeyIDResponse::default_instance_ = new Response_SelectAttKeyIDResponse();
  Response_InitQuoteExResponse::default_instance_ = new Response_InitQuoteExResponse();
  Response_GetQuoteSizeExResponse::default_instance_ = new Response_GetQuoteSizeExResponse();
  Response_GetQuoteExResponse::default_instance_ = new Response_GetQuoteExResponse();
  Request::default_instance_->InitAsDefaultInstance();
  Request_InitQuoteRequest::default_instance_->InitAsDefaultInstance();
  Request_GetQuoteRequest::default_instance_->InitAsDefaultInstance();
  Request_GetLaunchTokenRequest::default_instance_->InitAsDefaultInstance();
  Request_ReportAttestationErrorRequest::default_instance_->InitAsDefaultInstance();
  Request_CheckUpdateStatusRequest::default_instance_->InitAsDefaultInstance();
  Request_CreateSessionRequest::default_instance_->InitAsDefaultInstance();
  Request_InvokeServiceRequest::default_instance_->InitAsDefaultInstance();
  Request_ExchangeReportRequest::default_instance_->InitAsDefaultInstance();
  Request_CloseSessionRequest::default_instance_->InitAsDefaultInstance();
  Request_GetPsCapRequest::default_instance_->InitAsDefaultInstance();
  Request_GetWhiteListSizeRequest::default_instance_->InitAsDefaultInstance();
  Request_GetWhiteListRequest::default_instance_->InitAsDefaultInstance();
  Request_SGXGetExtendedEpidGroupIdRequest::default_instance_->InitAsDefaultInstance();
  Request_SGXSwitchExtendedEpidGroupRequest::default_instance_->InitAsDefaultInstance();
  Request_SGXRegisterRequest::default_instance_->InitAsDefaultInstance();
  Request_InitQuoteExRequest::default_instance_->InitAsDefaultInstance();
  Request_SelectAttKeyIDRequest::default_instance_->InitAsDefaultInstance();
  Request_GetQuoteSizeExRequest::default_instance_->InitAsDefaultInstance();
  Request_GetQuoteExRequest::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Response_InitQuoteResponse::default_instance_->InitAsDefaultInstance();
  Response_GetQuoteResponse::default_instance_->InitAsDefaultInstance();
  Response_GetLaunchTokenResponse::default_instance_->InitAsDefaultInstance();
  Response_ReportAttestationErrorResponse::default_instance_->InitAsDefaultInstance();
  Response_CheckUpdateStatusResponse::default_instance_->InitAsDefaultInstance();
  Response_CreateSessionResponse::default_instance_->InitAsDefaultInstance();
  Response_InvokeServiceResponse::default_instance_->InitAsDefaultInstance();
  Response_ExchangeReportResponse::default_instance_->InitAsDefaultInstance();
  Response_CloseSessionResponse::default_instance_->InitAsDefaultInstance();
  Response_GetPsCapResponse::default_instance_->InitAsDefaultInstance();
  Response_GetWhiteListSizeResponse::default_instance_->InitAsDefaultInstance();
  Response_GetWhiteListResponse::default_instance_->InitAsDefaultInstance();
  Response_SGXGetExtendedEpidGroupIdResponse::default_instance_->InitAsDefaultInstance();
  Response_SGXSwitchExtendedEpidGroupResponse::default_instance_->InitAsDefaultInstance();
  Response_SGXRegisterResponse::default_instance_->InitAsDefaultInstance();
  Response_SelectAttKeyIDResponse::default_instance_->InitAsDefaultInstance();
  Response_InitQuoteExResponse::default_instance_->InitAsDefaultInstance();
  Response_GetQuoteSizeExResponse::default_instance_->InitAsDefaultInstance();
  Response_GetQuoteExResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Request_InitQuoteRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_InitQuoteRequest::Request_InitQuoteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.InitQuoteRequest)
}

void Request_InitQuoteRequest::InitAsDefaultInstance() {
}

Request_InitQuoteRequest::Request_InitQuoteRequest(const Request_InitQuoteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.InitQuoteRequest)
}

void Request_InitQuoteRequest::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_InitQuoteRequest::~Request_InitQuoteRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.InitQuoteRequest)
  SharedDtor();
}

void Request_InitQuoteRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_InitQuoteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_InitQuoteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_InitQuoteRequest_descriptor_;
}

const Request_InitQuoteRequest& Request_InitQuoteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_InitQuoteRequest* Request_InitQuoteRequest::default_instance_ = NULL;

Request_InitQuoteRequest* Request_InitQuoteRequest::New() const {
  return new Request_InitQuoteRequest;
}

void Request_InitQuoteRequest::Clear() {
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_InitQuoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.InitQuoteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.InitQuoteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.InitQuoteRequest)
  return false;
#undef DO_
}

void Request_InitQuoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.InitQuoteRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.InitQuoteRequest)
}

::google::protobuf::uint8* Request_InitQuoteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.InitQuoteRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.InitQuoteRequest)
  return target;
}

int Request_InitQuoteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_InitQuoteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_InitQuoteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_InitQuoteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_InitQuoteRequest::MergeFrom(const Request_InitQuoteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_InitQuoteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_InitQuoteRequest::CopyFrom(const Request_InitQuoteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_InitQuoteRequest::IsInitialized() const {

  return true;
}

void Request_InitQuoteRequest::Swap(Request_InitQuoteRequest* other) {
  if (other != this) {
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_InitQuoteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_InitQuoteRequest_descriptor_;
  metadata.reflection = Request_InitQuoteRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_GetQuoteRequest::kReportFieldNumber;
const int Request_GetQuoteRequest::kQuoteTypeFieldNumber;
const int Request_GetQuoteRequest::kSpidFieldNumber;
const int Request_GetQuoteRequest::kNonceFieldNumber;
const int Request_GetQuoteRequest::kSigRlFieldNumber;
const int Request_GetQuoteRequest::kBufSizeFieldNumber;
const int Request_GetQuoteRequest::kQeReportFieldNumber;
const int Request_GetQuoteRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_GetQuoteRequest::Request_GetQuoteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetQuoteRequest)
}

void Request_GetQuoteRequest::InitAsDefaultInstance() {
}

Request_GetQuoteRequest::Request_GetQuoteRequest(const Request_GetQuoteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetQuoteRequest)
}

void Request_GetQuoteRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  report_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quote_type_ = 0u;
  spid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_rl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buf_size_ = 0u;
  qe_report_ = false;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetQuoteRequest::~Request_GetQuoteRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetQuoteRequest)
  SharedDtor();
}

void Request_GetQuoteRequest::SharedDtor() {
  if (report_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete report_;
  }
  if (spid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete spid_;
  }
  if (nonce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nonce_;
  }
  if (sig_rl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sig_rl_;
  }
  if (this != default_instance_) {
  }
}

void Request_GetQuoteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetQuoteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetQuoteRequest_descriptor_;
}

const Request_GetQuoteRequest& Request_GetQuoteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_GetQuoteRequest* Request_GetQuoteRequest::default_instance_ = NULL;

Request_GetQuoteRequest* Request_GetQuoteRequest::New() const {
  return new Request_GetQuoteRequest;
}

void Request_GetQuoteRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_GetQuoteRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(quote_type_, buf_size_);
    ZR_(qe_report_, timeout_);
    if (has_report()) {
      if (report_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        report_->clear();
      }
    }
    if (has_spid()) {
      if (spid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        spid_->clear();
      }
    }
    if (has_nonce()) {
      if (nonce_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nonce_->clear();
      }
    }
    if (has_sig_rl()) {
      if (sig_rl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sig_rl_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetQuoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetQuoteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes report = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_report()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_quote_type;
        break;
      }

      // required uint32 quote_type = 2;
      case 2: {
        if (tag == 16) {
         parse_quote_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quote_type_)));
          set_has_quote_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_spid;
        break;
      }

      // required bytes spid = 3;
      case 3: {
        if (tag == 26) {
         parse_spid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nonce;
        break;
      }

      // optional bytes nonce = 4;
      case 4: {
        if (tag == 34) {
         parse_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nonce()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sig_rl;
        break;
      }

      // optional bytes sig_rl = 5;
      case 5: {
        if (tag == 42) {
         parse_sig_rl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sig_rl()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_buf_size;
        break;
      }

      // required uint32 buf_size = 6;
      case 6: {
        if (tag == 48) {
         parse_buf_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buf_size_)));
          set_has_buf_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_qe_report;
        break;
      }

      // optional bool qe_report = 7;
      case 7: {
        if (tag == 56) {
         parse_qe_report:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &qe_report_)));
          set_has_qe_report();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetQuoteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetQuoteRequest)
  return false;
#undef DO_
}

void Request_GetQuoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetQuoteRequest)
  // required bytes report = 1;
  if (has_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->report(), output);
  }

  // required uint32 quote_type = 2;
  if (has_quote_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quote_type(), output);
  }

  // required bytes spid = 3;
  if (has_spid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->spid(), output);
  }

  // optional bytes nonce = 4;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->nonce(), output);
  }

  // optional bytes sig_rl = 5;
  if (has_sig_rl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sig_rl(), output);
  }

  // required uint32 buf_size = 6;
  if (has_buf_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->buf_size(), output);
  }

  // optional bool qe_report = 7;
  if (has_qe_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->qe_report(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetQuoteRequest)
}

::google::protobuf::uint8* Request_GetQuoteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetQuoteRequest)
  // required bytes report = 1;
  if (has_report()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->report(), target);
  }

  // required uint32 quote_type = 2;
  if (has_quote_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quote_type(), target);
  }

  // required bytes spid = 3;
  if (has_spid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->spid(), target);
  }

  // optional bytes nonce = 4;
  if (has_nonce()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->nonce(), target);
  }

  // optional bytes sig_rl = 5;
  if (has_sig_rl()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sig_rl(), target);
  }

  // required uint32 buf_size = 6;
  if (has_buf_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->buf_size(), target);
  }

  // optional bool qe_report = 7;
  if (has_qe_report()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->qe_report(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetQuoteRequest)
  return target;
}

int Request_GetQuoteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes report = 1;
    if (has_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->report());
    }

    // required uint32 quote_type = 2;
    if (has_quote_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quote_type());
    }

    // required bytes spid = 3;
    if (has_spid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->spid());
    }

    // optional bytes nonce = 4;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nonce());
    }

    // optional bytes sig_rl = 5;
    if (has_sig_rl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sig_rl());
    }

    // required uint32 buf_size = 6;
    if (has_buf_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buf_size());
    }

    // optional bool qe_report = 7;
    if (has_qe_report()) {
      total_size += 1 + 1;
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetQuoteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetQuoteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetQuoteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetQuoteRequest::MergeFrom(const Request_GetQuoteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_report()) {
      set_report(from.report());
    }
    if (from.has_quote_type()) {
      set_quote_type(from.quote_type());
    }
    if (from.has_spid()) {
      set_spid(from.spid());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_sig_rl()) {
      set_sig_rl(from.sig_rl());
    }
    if (from.has_buf_size()) {
      set_buf_size(from.buf_size());
    }
    if (from.has_qe_report()) {
      set_qe_report(from.qe_report());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetQuoteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetQuoteRequest::CopyFrom(const Request_GetQuoteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetQuoteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  return true;
}

void Request_GetQuoteRequest::Swap(Request_GetQuoteRequest* other) {
  if (other != this) {
    std::swap(report_, other->report_);
    std::swap(quote_type_, other->quote_type_);
    std::swap(spid_, other->spid_);
    std::swap(nonce_, other->nonce_);
    std::swap(sig_rl_, other->sig_rl_);
    std::swap(buf_size_, other->buf_size_);
    std::swap(qe_report_, other->qe_report_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetQuoteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetQuoteRequest_descriptor_;
  metadata.reflection = Request_GetQuoteRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_GetLaunchTokenRequest::kMrEnclaveFieldNumber;
const int Request_GetLaunchTokenRequest::kMrSignerFieldNumber;
const int Request_GetLaunchTokenRequest::kSeAttributesFieldNumber;
const int Request_GetLaunchTokenRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_GetLaunchTokenRequest::Request_GetLaunchTokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetLaunchTokenRequest)
}

void Request_GetLaunchTokenRequest::InitAsDefaultInstance() {
}

Request_GetLaunchTokenRequest::Request_GetLaunchTokenRequest(const Request_GetLaunchTokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetLaunchTokenRequest)
}

void Request_GetLaunchTokenRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mr_enclave_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mr_signer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  se_attributes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetLaunchTokenRequest::~Request_GetLaunchTokenRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetLaunchTokenRequest)
  SharedDtor();
}

void Request_GetLaunchTokenRequest::SharedDtor() {
  if (mr_enclave_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mr_enclave_;
  }
  if (mr_signer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mr_signer_;
  }
  if (se_attributes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete se_attributes_;
  }
  if (this != default_instance_) {
  }
}

void Request_GetLaunchTokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetLaunchTokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetLaunchTokenRequest_descriptor_;
}

const Request_GetLaunchTokenRequest& Request_GetLaunchTokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_GetLaunchTokenRequest* Request_GetLaunchTokenRequest::default_instance_ = NULL;

Request_GetLaunchTokenRequest* Request_GetLaunchTokenRequest::New() const {
  return new Request_GetLaunchTokenRequest;
}

void Request_GetLaunchTokenRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_mr_enclave()) {
      if (mr_enclave_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mr_enclave_->clear();
      }
    }
    if (has_mr_signer()) {
      if (mr_signer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mr_signer_->clear();
      }
    }
    if (has_se_attributes()) {
      if (se_attributes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        se_attributes_->clear();
      }
    }
    timeout_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetLaunchTokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetLaunchTokenRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes mr_enclave = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mr_enclave()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mr_signer;
        break;
      }

      // required bytes mr_signer = 2;
      case 2: {
        if (tag == 18) {
         parse_mr_signer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mr_signer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_se_attributes;
        break;
      }

      // required bytes se_attributes = 3;
      case 3: {
        if (tag == 26) {
         parse_se_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_se_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetLaunchTokenRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetLaunchTokenRequest)
  return false;
#undef DO_
}

void Request_GetLaunchTokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetLaunchTokenRequest)
  // required bytes mr_enclave = 1;
  if (has_mr_enclave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->mr_enclave(), output);
  }

  // required bytes mr_signer = 2;
  if (has_mr_signer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->mr_signer(), output);
  }

  // required bytes se_attributes = 3;
  if (has_se_attributes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->se_attributes(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetLaunchTokenRequest)
}

::google::protobuf::uint8* Request_GetLaunchTokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetLaunchTokenRequest)
  // required bytes mr_enclave = 1;
  if (has_mr_enclave()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->mr_enclave(), target);
  }

  // required bytes mr_signer = 2;
  if (has_mr_signer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->mr_signer(), target);
  }

  // required bytes se_attributes = 3;
  if (has_se_attributes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->se_attributes(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetLaunchTokenRequest)
  return target;
}

int Request_GetLaunchTokenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes mr_enclave = 1;
    if (has_mr_enclave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mr_enclave());
    }

    // required bytes mr_signer = 2;
    if (has_mr_signer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mr_signer());
    }

    // required bytes se_attributes = 3;
    if (has_se_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->se_attributes());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetLaunchTokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetLaunchTokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetLaunchTokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetLaunchTokenRequest::MergeFrom(const Request_GetLaunchTokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mr_enclave()) {
      set_mr_enclave(from.mr_enclave());
    }
    if (from.has_mr_signer()) {
      set_mr_signer(from.mr_signer());
    }
    if (from.has_se_attributes()) {
      set_se_attributes(from.se_attributes());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetLaunchTokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetLaunchTokenRequest::CopyFrom(const Request_GetLaunchTokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetLaunchTokenRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Request_GetLaunchTokenRequest::Swap(Request_GetLaunchTokenRequest* other) {
  if (other != this) {
    std::swap(mr_enclave_, other->mr_enclave_);
    std::swap(mr_signer_, other->mr_signer_);
    std::swap(se_attributes_, other->se_attributes_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetLaunchTokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetLaunchTokenRequest_descriptor_;
  metadata.reflection = Request_GetLaunchTokenRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_ReportAttestationErrorRequest::kPlatformInfoFieldNumber;
const int Request_ReportAttestationErrorRequest::kAttestationErrorCodeFieldNumber;
const int Request_ReportAttestationErrorRequest::kUpdateInfoSizeFieldNumber;
const int Request_ReportAttestationErrorRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_ReportAttestationErrorRequest::Request_ReportAttestationErrorRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.ReportAttestationErrorRequest)
}

void Request_ReportAttestationErrorRequest::InitAsDefaultInstance() {
}

Request_ReportAttestationErrorRequest::Request_ReportAttestationErrorRequest(const Request_ReportAttestationErrorRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.ReportAttestationErrorRequest)
}

void Request_ReportAttestationErrorRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platform_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attestation_error_code_ = 0u;
  update_info_size_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_ReportAttestationErrorRequest::~Request_ReportAttestationErrorRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.ReportAttestationErrorRequest)
  SharedDtor();
}

void Request_ReportAttestationErrorRequest::SharedDtor() {
  if (platform_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_info_;
  }
  if (this != default_instance_) {
  }
}

void Request_ReportAttestationErrorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_ReportAttestationErrorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_ReportAttestationErrorRequest_descriptor_;
}

const Request_ReportAttestationErrorRequest& Request_ReportAttestationErrorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_ReportAttestationErrorRequest* Request_ReportAttestationErrorRequest::default_instance_ = NULL;

Request_ReportAttestationErrorRequest* Request_ReportAttestationErrorRequest::New() const {
  return new Request_ReportAttestationErrorRequest;
}

void Request_ReportAttestationErrorRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_ReportAttestationErrorRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(attestation_error_code_, timeout_);
    if (has_platform_info()) {
      if (platform_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_ReportAttestationErrorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.ReportAttestationErrorRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes platform_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attestation_error_code;
        break;
      }

      // required uint32 attestation_error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_attestation_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attestation_error_code_)));
          set_has_attestation_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_update_info_size;
        break;
      }

      // required uint32 update_info_size = 3;
      case 3: {
        if (tag == 24) {
         parse_update_info_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_info_size_)));
          set_has_update_info_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.ReportAttestationErrorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.ReportAttestationErrorRequest)
  return false;
#undef DO_
}

void Request_ReportAttestationErrorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.ReportAttestationErrorRequest)
  // required bytes platform_info = 1;
  if (has_platform_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->platform_info(), output);
  }

  // required uint32 attestation_error_code = 2;
  if (has_attestation_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attestation_error_code(), output);
  }

  // required uint32 update_info_size = 3;
  if (has_update_info_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->update_info_size(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.ReportAttestationErrorRequest)
}

::google::protobuf::uint8* Request_ReportAttestationErrorRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.ReportAttestationErrorRequest)
  // required bytes platform_info = 1;
  if (has_platform_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->platform_info(), target);
  }

  // required uint32 attestation_error_code = 2;
  if (has_attestation_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attestation_error_code(), target);
  }

  // required uint32 update_info_size = 3;
  if (has_update_info_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->update_info_size(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.ReportAttestationErrorRequest)
  return target;
}

int Request_ReportAttestationErrorRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes platform_info = 1;
    if (has_platform_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_info());
    }

    // required uint32 attestation_error_code = 2;
    if (has_attestation_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attestation_error_code());
    }

    // required uint32 update_info_size = 3;
    if (has_update_info_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_info_size());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_ReportAttestationErrorRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_ReportAttestationErrorRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_ReportAttestationErrorRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_ReportAttestationErrorRequest::MergeFrom(const Request_ReportAttestationErrorRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform_info()) {
      set_platform_info(from.platform_info());
    }
    if (from.has_attestation_error_code()) {
      set_attestation_error_code(from.attestation_error_code());
    }
    if (from.has_update_info_size()) {
      set_update_info_size(from.update_info_size());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_ReportAttestationErrorRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_ReportAttestationErrorRequest::CopyFrom(const Request_ReportAttestationErrorRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_ReportAttestationErrorRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Request_ReportAttestationErrorRequest::Swap(Request_ReportAttestationErrorRequest* other) {
  if (other != this) {
    std::swap(platform_info_, other->platform_info_);
    std::swap(attestation_error_code_, other->attestation_error_code_);
    std::swap(update_info_size_, other->update_info_size_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_ReportAttestationErrorRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_ReportAttestationErrorRequest_descriptor_;
  metadata.reflection = Request_ReportAttestationErrorRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_CheckUpdateStatusRequest::kPlatformInfoFieldNumber;
const int Request_CheckUpdateStatusRequest::kUpdateInfoSizeFieldNumber;
const int Request_CheckUpdateStatusRequest::kConfigFieldNumber;
const int Request_CheckUpdateStatusRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_CheckUpdateStatusRequest::Request_CheckUpdateStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.CheckUpdateStatusRequest)
}

void Request_CheckUpdateStatusRequest::InitAsDefaultInstance() {
}

Request_CheckUpdateStatusRequest::Request_CheckUpdateStatusRequest(const Request_CheckUpdateStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.CheckUpdateStatusRequest)
}

void Request_CheckUpdateStatusRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platform_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_info_size_ = 0u;
  config_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_CheckUpdateStatusRequest::~Request_CheckUpdateStatusRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.CheckUpdateStatusRequest)
  SharedDtor();
}

void Request_CheckUpdateStatusRequest::SharedDtor() {
  if (platform_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_info_;
  }
  if (this != default_instance_) {
  }
}

void Request_CheckUpdateStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_CheckUpdateStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_CheckUpdateStatusRequest_descriptor_;
}

const Request_CheckUpdateStatusRequest& Request_CheckUpdateStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_CheckUpdateStatusRequest* Request_CheckUpdateStatusRequest::default_instance_ = NULL;

Request_CheckUpdateStatusRequest* Request_CheckUpdateStatusRequest::New() const {
  return new Request_CheckUpdateStatusRequest;
}

void Request_CheckUpdateStatusRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_CheckUpdateStatusRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(update_info_size_, timeout_);
    if (has_platform_info()) {
      if (platform_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_CheckUpdateStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.CheckUpdateStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes platform_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_update_info_size;
        break;
      }

      // required uint32 update_info_size = 2;
      case 2: {
        if (tag == 16) {
         parse_update_info_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_info_size_)));
          set_has_update_info_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_config;
        break;
      }

      // required uint32 config = 3;
      case 3: {
        if (tag == 24) {
         parse_config:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_)));
          set_has_config();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.CheckUpdateStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.CheckUpdateStatusRequest)
  return false;
#undef DO_
}

void Request_CheckUpdateStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.CheckUpdateStatusRequest)
  // optional bytes platform_info = 1;
  if (has_platform_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->platform_info(), output);
  }

  // required uint32 update_info_size = 2;
  if (has_update_info_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update_info_size(), output);
  }

  // required uint32 config = 3;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->config(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.CheckUpdateStatusRequest)
}

::google::protobuf::uint8* Request_CheckUpdateStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.CheckUpdateStatusRequest)
  // optional bytes platform_info = 1;
  if (has_platform_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->platform_info(), target);
  }

  // required uint32 update_info_size = 2;
  if (has_update_info_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update_info_size(), target);
  }

  // required uint32 config = 3;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->config(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.CheckUpdateStatusRequest)
  return target;
}

int Request_CheckUpdateStatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes platform_info = 1;
    if (has_platform_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_info());
    }

    // required uint32 update_info_size = 2;
    if (has_update_info_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_info_size());
    }

    // required uint32 config = 3;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_CheckUpdateStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_CheckUpdateStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_CheckUpdateStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_CheckUpdateStatusRequest::MergeFrom(const Request_CheckUpdateStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform_info()) {
      set_platform_info(from.platform_info());
    }
    if (from.has_update_info_size()) {
      set_update_info_size(from.update_info_size());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_CheckUpdateStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_CheckUpdateStatusRequest::CopyFrom(const Request_CheckUpdateStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_CheckUpdateStatusRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void Request_CheckUpdateStatusRequest::Swap(Request_CheckUpdateStatusRequest* other) {
  if (other != this) {
    std::swap(platform_info_, other->platform_info_);
    std::swap(update_info_size_, other->update_info_size_);
    std::swap(config_, other->config_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_CheckUpdateStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_CheckUpdateStatusRequest_descriptor_;
  metadata.reflection = Request_CheckUpdateStatusRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_CreateSessionRequest::kDhMsg1SizeFieldNumber;
const int Request_CreateSessionRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_CreateSessionRequest::Request_CreateSessionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.CreateSessionRequest)
}

void Request_CreateSessionRequest::InitAsDefaultInstance() {
}

Request_CreateSessionRequest::Request_CreateSessionRequest(const Request_CreateSessionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.CreateSessionRequest)
}

void Request_CreateSessionRequest::SharedCtor() {
  _cached_size_ = 0;
  dh_msg1_size_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_CreateSessionRequest::~Request_CreateSessionRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.CreateSessionRequest)
  SharedDtor();
}

void Request_CreateSessionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_CreateSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_CreateSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_CreateSessionRequest_descriptor_;
}

const Request_CreateSessionRequest& Request_CreateSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_CreateSessionRequest* Request_CreateSessionRequest::default_instance_ = NULL;

Request_CreateSessionRequest* Request_CreateSessionRequest::New() const {
  return new Request_CreateSessionRequest;
}

void Request_CreateSessionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_CreateSessionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dh_msg1_size_, timeout_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_CreateSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.CreateSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 dh_msg1_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dh_msg1_size_)));
          set_has_dh_msg1_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.CreateSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.CreateSessionRequest)
  return false;
#undef DO_
}

void Request_CreateSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.CreateSessionRequest)
  // required uint32 dh_msg1_size = 1;
  if (has_dh_msg1_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dh_msg1_size(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.CreateSessionRequest)
}

::google::protobuf::uint8* Request_CreateSessionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.CreateSessionRequest)
  // required uint32 dh_msg1_size = 1;
  if (has_dh_msg1_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dh_msg1_size(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.CreateSessionRequest)
  return target;
}

int Request_CreateSessionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 dh_msg1_size = 1;
    if (has_dh_msg1_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dh_msg1_size());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_CreateSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_CreateSessionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_CreateSessionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_CreateSessionRequest::MergeFrom(const Request_CreateSessionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dh_msg1_size()) {
      set_dh_msg1_size(from.dh_msg1_size());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_CreateSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_CreateSessionRequest::CopyFrom(const Request_CreateSessionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_CreateSessionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Request_CreateSessionRequest::Swap(Request_CreateSessionRequest* other) {
  if (other != this) {
    std::swap(dh_msg1_size_, other->dh_msg1_size_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_CreateSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_CreateSessionRequest_descriptor_;
  metadata.reflection = Request_CreateSessionRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_InvokeServiceRequest::kPseMessageFieldNumber;
const int Request_InvokeServiceRequest::kPseRespSizeFieldNumber;
const int Request_InvokeServiceRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_InvokeServiceRequest::Request_InvokeServiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.InvokeServiceRequest)
}

void Request_InvokeServiceRequest::InitAsDefaultInstance() {
}

Request_InvokeServiceRequest::Request_InvokeServiceRequest(const Request_InvokeServiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.InvokeServiceRequest)
}

void Request_InvokeServiceRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pse_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pse_resp_size_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_InvokeServiceRequest::~Request_InvokeServiceRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.InvokeServiceRequest)
  SharedDtor();
}

void Request_InvokeServiceRequest::SharedDtor() {
  if (pse_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pse_message_;
  }
  if (this != default_instance_) {
  }
}

void Request_InvokeServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_InvokeServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_InvokeServiceRequest_descriptor_;
}

const Request_InvokeServiceRequest& Request_InvokeServiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_InvokeServiceRequest* Request_InvokeServiceRequest::default_instance_ = NULL;

Request_InvokeServiceRequest* Request_InvokeServiceRequest::New() const {
  return new Request_InvokeServiceRequest;
}

void Request_InvokeServiceRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_InvokeServiceRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(pse_resp_size_, timeout_);
    if (has_pse_message()) {
      if (pse_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pse_message_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_InvokeServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.InvokeServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes pse_message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pse_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pse_resp_size;
        break;
      }

      // required uint32 pse_resp_size = 2;
      case 2: {
        if (tag == 16) {
         parse_pse_resp_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pse_resp_size_)));
          set_has_pse_resp_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.InvokeServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.InvokeServiceRequest)
  return false;
#undef DO_
}

void Request_InvokeServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.InvokeServiceRequest)
  // required bytes pse_message = 1;
  if (has_pse_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pse_message(), output);
  }

  // required uint32 pse_resp_size = 2;
  if (has_pse_resp_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pse_resp_size(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.InvokeServiceRequest)
}

::google::protobuf::uint8* Request_InvokeServiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.InvokeServiceRequest)
  // required bytes pse_message = 1;
  if (has_pse_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pse_message(), target);
  }

  // required uint32 pse_resp_size = 2;
  if (has_pse_resp_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pse_resp_size(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.InvokeServiceRequest)
  return target;
}

int Request_InvokeServiceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes pse_message = 1;
    if (has_pse_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pse_message());
    }

    // required uint32 pse_resp_size = 2;
    if (has_pse_resp_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pse_resp_size());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_InvokeServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_InvokeServiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_InvokeServiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_InvokeServiceRequest::MergeFrom(const Request_InvokeServiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pse_message()) {
      set_pse_message(from.pse_message());
    }
    if (from.has_pse_resp_size()) {
      set_pse_resp_size(from.pse_resp_size());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_InvokeServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_InvokeServiceRequest::CopyFrom(const Request_InvokeServiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_InvokeServiceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Request_InvokeServiceRequest::Swap(Request_InvokeServiceRequest* other) {
  if (other != this) {
    std::swap(pse_message_, other->pse_message_);
    std::swap(pse_resp_size_, other->pse_resp_size_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_InvokeServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_InvokeServiceRequest_descriptor_;
  metadata.reflection = Request_InvokeServiceRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_ExchangeReportRequest::kSessionIdFieldNumber;
const int Request_ExchangeReportRequest::kSeDhMsg2FieldNumber;
const int Request_ExchangeReportRequest::kSeDhMsg3SizeFieldNumber;
const int Request_ExchangeReportRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_ExchangeReportRequest::Request_ExchangeReportRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.ExchangeReportRequest)
}

void Request_ExchangeReportRequest::InitAsDefaultInstance() {
}

Request_ExchangeReportRequest::Request_ExchangeReportRequest(const Request_ExchangeReportRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.ExchangeReportRequest)
}

void Request_ExchangeReportRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  session_id_ = 0u;
  se_dh_msg2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  se_dh_msg3_size_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_ExchangeReportRequest::~Request_ExchangeReportRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.ExchangeReportRequest)
  SharedDtor();
}

void Request_ExchangeReportRequest::SharedDtor() {
  if (se_dh_msg2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete se_dh_msg2_;
  }
  if (this != default_instance_) {
  }
}

void Request_ExchangeReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_ExchangeReportRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_ExchangeReportRequest_descriptor_;
}

const Request_ExchangeReportRequest& Request_ExchangeReportRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_ExchangeReportRequest* Request_ExchangeReportRequest::default_instance_ = NULL;

Request_ExchangeReportRequest* Request_ExchangeReportRequest::New() const {
  return new Request_ExchangeReportRequest;
}

void Request_ExchangeReportRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_ExchangeReportRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(session_id_, timeout_);
    if (has_se_dh_msg2()) {
      if (se_dh_msg2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        se_dh_msg2_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_ExchangeReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.ExchangeReportRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_se_dh_msg2;
        break;
      }

      // required bytes se_dh_msg2 = 2;
      case 2: {
        if (tag == 18) {
         parse_se_dh_msg2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_se_dh_msg2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_se_dh_msg3_size;
        break;
      }

      // required uint32 se_dh_msg3_size = 3;
      case 3: {
        if (tag == 24) {
         parse_se_dh_msg3_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &se_dh_msg3_size_)));
          set_has_se_dh_msg3_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.ExchangeReportRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.ExchangeReportRequest)
  return false;
#undef DO_
}

void Request_ExchangeReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.ExchangeReportRequest)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session_id(), output);
  }

  // required bytes se_dh_msg2 = 2;
  if (has_se_dh_msg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->se_dh_msg2(), output);
  }

  // required uint32 se_dh_msg3_size = 3;
  if (has_se_dh_msg3_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->se_dh_msg3_size(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.ExchangeReportRequest)
}

::google::protobuf::uint8* Request_ExchangeReportRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.ExchangeReportRequest)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session_id(), target);
  }

  // required bytes se_dh_msg2 = 2;
  if (has_se_dh_msg2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->se_dh_msg2(), target);
  }

  // required uint32 se_dh_msg3_size = 3;
  if (has_se_dh_msg3_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->se_dh_msg3_size(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.ExchangeReportRequest)
  return target;
}

int Request_ExchangeReportRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // required bytes se_dh_msg2 = 2;
    if (has_se_dh_msg2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->se_dh_msg2());
    }

    // required uint32 se_dh_msg3_size = 3;
    if (has_se_dh_msg3_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->se_dh_msg3_size());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_ExchangeReportRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_ExchangeReportRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_ExchangeReportRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_ExchangeReportRequest::MergeFrom(const Request_ExchangeReportRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_se_dh_msg2()) {
      set_se_dh_msg2(from.se_dh_msg2());
    }
    if (from.has_se_dh_msg3_size()) {
      set_se_dh_msg3_size(from.se_dh_msg3_size());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_ExchangeReportRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_ExchangeReportRequest::CopyFrom(const Request_ExchangeReportRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_ExchangeReportRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Request_ExchangeReportRequest::Swap(Request_ExchangeReportRequest* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(se_dh_msg2_, other->se_dh_msg2_);
    std::swap(se_dh_msg3_size_, other->se_dh_msg3_size_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_ExchangeReportRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_ExchangeReportRequest_descriptor_;
  metadata.reflection = Request_ExchangeReportRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_CloseSessionRequest::kSessionIdFieldNumber;
const int Request_CloseSessionRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_CloseSessionRequest::Request_CloseSessionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.CloseSessionRequest)
}

void Request_CloseSessionRequest::InitAsDefaultInstance() {
}

Request_CloseSessionRequest::Request_CloseSessionRequest(const Request_CloseSessionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.CloseSessionRequest)
}

void Request_CloseSessionRequest::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_CloseSessionRequest::~Request_CloseSessionRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.CloseSessionRequest)
  SharedDtor();
}

void Request_CloseSessionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_CloseSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_CloseSessionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_CloseSessionRequest_descriptor_;
}

const Request_CloseSessionRequest& Request_CloseSessionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_CloseSessionRequest* Request_CloseSessionRequest::default_instance_ = NULL;

Request_CloseSessionRequest* Request_CloseSessionRequest::New() const {
  return new Request_CloseSessionRequest;
}

void Request_CloseSessionRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_CloseSessionRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(session_id_, timeout_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_CloseSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.CloseSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.CloseSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.CloseSessionRequest)
  return false;
#undef DO_
}

void Request_CloseSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.CloseSessionRequest)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->session_id(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.CloseSessionRequest)
}

::google::protobuf::uint8* Request_CloseSessionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.CloseSessionRequest)
  // required uint32 session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->session_id(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.CloseSessionRequest)
  return target;
}

int Request_CloseSessionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_CloseSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_CloseSessionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_CloseSessionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_CloseSessionRequest::MergeFrom(const Request_CloseSessionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_CloseSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_CloseSessionRequest::CopyFrom(const Request_CloseSessionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_CloseSessionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Request_CloseSessionRequest::Swap(Request_CloseSessionRequest* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_CloseSessionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_CloseSessionRequest_descriptor_;
  metadata.reflection = Request_CloseSessionRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_GetPsCapRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_GetPsCapRequest::Request_GetPsCapRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetPsCapRequest)
}

void Request_GetPsCapRequest::InitAsDefaultInstance() {
}

Request_GetPsCapRequest::Request_GetPsCapRequest(const Request_GetPsCapRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetPsCapRequest)
}

void Request_GetPsCapRequest::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetPsCapRequest::~Request_GetPsCapRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetPsCapRequest)
  SharedDtor();
}

void Request_GetPsCapRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetPsCapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetPsCapRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetPsCapRequest_descriptor_;
}

const Request_GetPsCapRequest& Request_GetPsCapRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_GetPsCapRequest* Request_GetPsCapRequest::default_instance_ = NULL;

Request_GetPsCapRequest* Request_GetPsCapRequest::New() const {
  return new Request_GetPsCapRequest;
}

void Request_GetPsCapRequest::Clear() {
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetPsCapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetPsCapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetPsCapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetPsCapRequest)
  return false;
#undef DO_
}

void Request_GetPsCapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetPsCapRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetPsCapRequest)
}

::google::protobuf::uint8* Request_GetPsCapRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetPsCapRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetPsCapRequest)
  return target;
}

int Request_GetPsCapRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetPsCapRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetPsCapRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetPsCapRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetPsCapRequest::MergeFrom(const Request_GetPsCapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetPsCapRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetPsCapRequest::CopyFrom(const Request_GetPsCapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetPsCapRequest::IsInitialized() const {

  return true;
}

void Request_GetPsCapRequest::Swap(Request_GetPsCapRequest* other) {
  if (other != this) {
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetPsCapRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetPsCapRequest_descriptor_;
  metadata.reflection = Request_GetPsCapRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_GetWhiteListSizeRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_GetWhiteListSizeRequest::Request_GetWhiteListSizeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetWhiteListSizeRequest)
}

void Request_GetWhiteListSizeRequest::InitAsDefaultInstance() {
}

Request_GetWhiteListSizeRequest::Request_GetWhiteListSizeRequest(const Request_GetWhiteListSizeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetWhiteListSizeRequest)
}

void Request_GetWhiteListSizeRequest::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetWhiteListSizeRequest::~Request_GetWhiteListSizeRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetWhiteListSizeRequest)
  SharedDtor();
}

void Request_GetWhiteListSizeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetWhiteListSizeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetWhiteListSizeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetWhiteListSizeRequest_descriptor_;
}

const Request_GetWhiteListSizeRequest& Request_GetWhiteListSizeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_GetWhiteListSizeRequest* Request_GetWhiteListSizeRequest::default_instance_ = NULL;

Request_GetWhiteListSizeRequest* Request_GetWhiteListSizeRequest::New() const {
  return new Request_GetWhiteListSizeRequest;
}

void Request_GetWhiteListSizeRequest::Clear() {
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetWhiteListSizeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetWhiteListSizeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetWhiteListSizeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetWhiteListSizeRequest)
  return false;
#undef DO_
}

void Request_GetWhiteListSizeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetWhiteListSizeRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetWhiteListSizeRequest)
}

::google::protobuf::uint8* Request_GetWhiteListSizeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetWhiteListSizeRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetWhiteListSizeRequest)
  return target;
}

int Request_GetWhiteListSizeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetWhiteListSizeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetWhiteListSizeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetWhiteListSizeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetWhiteListSizeRequest::MergeFrom(const Request_GetWhiteListSizeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetWhiteListSizeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetWhiteListSizeRequest::CopyFrom(const Request_GetWhiteListSizeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetWhiteListSizeRequest::IsInitialized() const {

  return true;
}

void Request_GetWhiteListSizeRequest::Swap(Request_GetWhiteListSizeRequest* other) {
  if (other != this) {
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetWhiteListSizeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetWhiteListSizeRequest_descriptor_;
  metadata.reflection = Request_GetWhiteListSizeRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_GetWhiteListRequest::kWhiteListSizeFieldNumber;
const int Request_GetWhiteListRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_GetWhiteListRequest::Request_GetWhiteListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetWhiteListRequest)
}

void Request_GetWhiteListRequest::InitAsDefaultInstance() {
}

Request_GetWhiteListRequest::Request_GetWhiteListRequest(const Request_GetWhiteListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetWhiteListRequest)
}

void Request_GetWhiteListRequest::SharedCtor() {
  _cached_size_ = 0;
  white_list_size_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetWhiteListRequest::~Request_GetWhiteListRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetWhiteListRequest)
  SharedDtor();
}

void Request_GetWhiteListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_GetWhiteListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetWhiteListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetWhiteListRequest_descriptor_;
}

const Request_GetWhiteListRequest& Request_GetWhiteListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_GetWhiteListRequest* Request_GetWhiteListRequest::default_instance_ = NULL;

Request_GetWhiteListRequest* Request_GetWhiteListRequest::New() const {
  return new Request_GetWhiteListRequest;
}

void Request_GetWhiteListRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_GetWhiteListRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(white_list_size_, timeout_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetWhiteListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetWhiteListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 white_list_size = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &white_list_size_)));
          set_has_white_list_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetWhiteListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetWhiteListRequest)
  return false;
#undef DO_
}

void Request_GetWhiteListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetWhiteListRequest)
  // optional uint32 white_list_size = 1;
  if (has_white_list_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->white_list_size(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetWhiteListRequest)
}

::google::protobuf::uint8* Request_GetWhiteListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetWhiteListRequest)
  // optional uint32 white_list_size = 1;
  if (has_white_list_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->white_list_size(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetWhiteListRequest)
  return target;
}

int Request_GetWhiteListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 white_list_size = 1;
    if (has_white_list_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->white_list_size());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetWhiteListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetWhiteListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetWhiteListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetWhiteListRequest::MergeFrom(const Request_GetWhiteListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_white_list_size()) {
      set_white_list_size(from.white_list_size());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetWhiteListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetWhiteListRequest::CopyFrom(const Request_GetWhiteListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetWhiteListRequest::IsInitialized() const {

  return true;
}

void Request_GetWhiteListRequest::Swap(Request_GetWhiteListRequest* other) {
  if (other != this) {
    std::swap(white_list_size_, other->white_list_size_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetWhiteListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetWhiteListRequest_descriptor_;
  metadata.reflection = Request_GetWhiteListRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_SGXGetExtendedEpidGroupIdRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_SGXGetExtendedEpidGroupIdRequest::Request_SGXGetExtendedEpidGroupIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
}

void Request_SGXGetExtendedEpidGroupIdRequest::InitAsDefaultInstance() {
}

Request_SGXGetExtendedEpidGroupIdRequest::Request_SGXGetExtendedEpidGroupIdRequest(const Request_SGXGetExtendedEpidGroupIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
}

void Request_SGXGetExtendedEpidGroupIdRequest::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_SGXGetExtendedEpidGroupIdRequest::~Request_SGXGetExtendedEpidGroupIdRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  SharedDtor();
}

void Request_SGXGetExtendedEpidGroupIdRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_SGXGetExtendedEpidGroupIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_SGXGetExtendedEpidGroupIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_SGXGetExtendedEpidGroupIdRequest_descriptor_;
}

const Request_SGXGetExtendedEpidGroupIdRequest& Request_SGXGetExtendedEpidGroupIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_SGXGetExtendedEpidGroupIdRequest* Request_SGXGetExtendedEpidGroupIdRequest::default_instance_ = NULL;

Request_SGXGetExtendedEpidGroupIdRequest* Request_SGXGetExtendedEpidGroupIdRequest::New() const {
  return new Request_SGXGetExtendedEpidGroupIdRequest;
}

void Request_SGXGetExtendedEpidGroupIdRequest::Clear() {
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_SGXGetExtendedEpidGroupIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  return false;
#undef DO_
}

void Request_SGXGetExtendedEpidGroupIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
}

::google::protobuf::uint8* Request_SGXGetExtendedEpidGroupIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.SGXGetExtendedEpidGroupIdRequest)
  return target;
}

int Request_SGXGetExtendedEpidGroupIdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_SGXGetExtendedEpidGroupIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_SGXGetExtendedEpidGroupIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_SGXGetExtendedEpidGroupIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_SGXGetExtendedEpidGroupIdRequest::MergeFrom(const Request_SGXGetExtendedEpidGroupIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_SGXGetExtendedEpidGroupIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_SGXGetExtendedEpidGroupIdRequest::CopyFrom(const Request_SGXGetExtendedEpidGroupIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_SGXGetExtendedEpidGroupIdRequest::IsInitialized() const {

  return true;
}

void Request_SGXGetExtendedEpidGroupIdRequest::Swap(Request_SGXGetExtendedEpidGroupIdRequest* other) {
  if (other != this) {
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_SGXGetExtendedEpidGroupIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_SGXGetExtendedEpidGroupIdRequest_descriptor_;
  metadata.reflection = Request_SGXGetExtendedEpidGroupIdRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_SGXSwitchExtendedEpidGroupRequest::kXGroupIdFieldNumber;
const int Request_SGXSwitchExtendedEpidGroupRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_SGXSwitchExtendedEpidGroupRequest::Request_SGXSwitchExtendedEpidGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
}

void Request_SGXSwitchExtendedEpidGroupRequest::InitAsDefaultInstance() {
}

Request_SGXSwitchExtendedEpidGroupRequest::Request_SGXSwitchExtendedEpidGroupRequest(const Request_SGXSwitchExtendedEpidGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
}

void Request_SGXSwitchExtendedEpidGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  x_group_id_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_SGXSwitchExtendedEpidGroupRequest::~Request_SGXSwitchExtendedEpidGroupRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  SharedDtor();
}

void Request_SGXSwitchExtendedEpidGroupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_SGXSwitchExtendedEpidGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_SGXSwitchExtendedEpidGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_SGXSwitchExtendedEpidGroupRequest_descriptor_;
}

const Request_SGXSwitchExtendedEpidGroupRequest& Request_SGXSwitchExtendedEpidGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_SGXSwitchExtendedEpidGroupRequest* Request_SGXSwitchExtendedEpidGroupRequest::default_instance_ = NULL;

Request_SGXSwitchExtendedEpidGroupRequest* Request_SGXSwitchExtendedEpidGroupRequest::New() const {
  return new Request_SGXSwitchExtendedEpidGroupRequest;
}

void Request_SGXSwitchExtendedEpidGroupRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_SGXSwitchExtendedEpidGroupRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_group_id_, timeout_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_SGXSwitchExtendedEpidGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x_group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_group_id_)));
          set_has_x_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  return false;
#undef DO_
}

void Request_SGXSwitchExtendedEpidGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  // optional uint32 x_group_id = 1;
  if (has_x_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x_group_id(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
}

::google::protobuf::uint8* Request_SGXSwitchExtendedEpidGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  // optional uint32 x_group_id = 1;
  if (has_x_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x_group_id(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.SGXSwitchExtendedEpidGroupRequest)
  return target;
}

int Request_SGXSwitchExtendedEpidGroupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x_group_id = 1;
    if (has_x_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x_group_id());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_SGXSwitchExtendedEpidGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_SGXSwitchExtendedEpidGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_SGXSwitchExtendedEpidGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_SGXSwitchExtendedEpidGroupRequest::MergeFrom(const Request_SGXSwitchExtendedEpidGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_group_id()) {
      set_x_group_id(from.x_group_id());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_SGXSwitchExtendedEpidGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_SGXSwitchExtendedEpidGroupRequest::CopyFrom(const Request_SGXSwitchExtendedEpidGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_SGXSwitchExtendedEpidGroupRequest::IsInitialized() const {

  return true;
}

void Request_SGXSwitchExtendedEpidGroupRequest::Swap(Request_SGXSwitchExtendedEpidGroupRequest* other) {
  if (other != this) {
    std::swap(x_group_id_, other->x_group_id_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_SGXSwitchExtendedEpidGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_SGXSwitchExtendedEpidGroupRequest_descriptor_;
  metadata.reflection = Request_SGXSwitchExtendedEpidGroupRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_SGXRegisterRequest::kBufFieldNumber;
const int Request_SGXRegisterRequest::kDataTypeFieldNumber;
const int Request_SGXRegisterRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_SGXRegisterRequest::Request_SGXRegisterRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.SGXRegisterRequest)
}

void Request_SGXRegisterRequest::InitAsDefaultInstance() {
}

Request_SGXRegisterRequest::Request_SGXRegisterRequest(const Request_SGXRegisterRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.SGXRegisterRequest)
}

void Request_SGXRegisterRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  buf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_SGXRegisterRequest::~Request_SGXRegisterRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.SGXRegisterRequest)
  SharedDtor();
}

void Request_SGXRegisterRequest::SharedDtor() {
  if (buf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buf_;
  }
  if (this != default_instance_) {
  }
}

void Request_SGXRegisterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_SGXRegisterRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_SGXRegisterRequest_descriptor_;
}

const Request_SGXRegisterRequest& Request_SGXRegisterRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_SGXRegisterRequest* Request_SGXRegisterRequest::default_instance_ = NULL;

Request_SGXRegisterRequest* Request_SGXRegisterRequest::New() const {
  return new Request_SGXRegisterRequest;
}

void Request_SGXRegisterRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_SGXRegisterRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(data_type_, timeout_);
    if (has_buf()) {
      if (buf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buf_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_SGXRegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.SGXRegisterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes buf = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_data_type;
        break;
      }

      // required uint32 data_type = 2;
      case 2: {
        if (tag == 16) {
         parse_data_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_type_)));
          set_has_data_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.SGXRegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.SGXRegisterRequest)
  return false;
#undef DO_
}

void Request_SGXRegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.SGXRegisterRequest)
  // required bytes buf = 1;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->buf(), output);
  }

  // required uint32 data_type = 2;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_type(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.SGXRegisterRequest)
}

::google::protobuf::uint8* Request_SGXRegisterRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.SGXRegisterRequest)
  // required bytes buf = 1;
  if (has_buf()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->buf(), target);
  }

  // required uint32 data_type = 2;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->data_type(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.SGXRegisterRequest)
  return target;
}

int Request_SGXRegisterRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes buf = 1;
    if (has_buf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buf());
    }

    // required uint32 data_type = 2;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_type());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_SGXRegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_SGXRegisterRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_SGXRegisterRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_SGXRegisterRequest::MergeFrom(const Request_SGXRegisterRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buf()) {
      set_buf(from.buf());
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_SGXRegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_SGXRegisterRequest::CopyFrom(const Request_SGXRegisterRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_SGXRegisterRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Request_SGXRegisterRequest::Swap(Request_SGXRegisterRequest* other) {
  if (other != this) {
    std::swap(buf_, other->buf_);
    std::swap(data_type_, other->data_type_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_SGXRegisterRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_SGXRegisterRequest_descriptor_;
  metadata.reflection = Request_SGXRegisterRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_InitQuoteExRequest::kAttKeyIdFieldNumber;
const int Request_InitQuoteExRequest::kBPubKeyIdFieldNumber;
const int Request_InitQuoteExRequest::kBufSizeFieldNumber;
const int Request_InitQuoteExRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_InitQuoteExRequest::Request_InitQuoteExRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.InitQuoteExRequest)
}

void Request_InitQuoteExRequest::InitAsDefaultInstance() {
}

Request_InitQuoteExRequest::Request_InitQuoteExRequest(const Request_InitQuoteExRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.InitQuoteExRequest)
}

void Request_InitQuoteExRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  att_key_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  b_pub_key_id_ = false;
  buf_size_ = GOOGLE_ULONGLONG(0);
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_InitQuoteExRequest::~Request_InitQuoteExRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.InitQuoteExRequest)
  SharedDtor();
}

void Request_InitQuoteExRequest::SharedDtor() {
  if (att_key_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete att_key_id_;
  }
  if (this != default_instance_) {
  }
}

void Request_InitQuoteExRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_InitQuoteExRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_InitQuoteExRequest_descriptor_;
}

const Request_InitQuoteExRequest& Request_InitQuoteExRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_InitQuoteExRequest* Request_InitQuoteExRequest::default_instance_ = NULL;

Request_InitQuoteExRequest* Request_InitQuoteExRequest::New() const {
  return new Request_InitQuoteExRequest;
}

void Request_InitQuoteExRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_InitQuoteExRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(buf_size_, timeout_);
    if (has_att_key_id()) {
      if (att_key_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        att_key_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_InitQuoteExRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.InitQuoteExRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes att_key_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_att_key_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_b_pub_key_id;
        break;
      }

      // required bool b_pub_key_id = 3;
      case 3: {
        if (tag == 24) {
         parse_b_pub_key_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_pub_key_id_)));
          set_has_b_pub_key_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buf_size;
        break;
      }

      // optional uint64 buf_size = 4;
      case 4: {
        if (tag == 32) {
         parse_buf_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buf_size_)));
          set_has_buf_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.InitQuoteExRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.InitQuoteExRequest)
  return false;
#undef DO_
}

void Request_InitQuoteExRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.InitQuoteExRequest)
  // optional bytes att_key_id = 1;
  if (has_att_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->att_key_id(), output);
  }

  // required bool b_pub_key_id = 3;
  if (has_b_pub_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->b_pub_key_id(), output);
  }

  // optional uint64 buf_size = 4;
  if (has_buf_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->buf_size(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.InitQuoteExRequest)
}

::google::protobuf::uint8* Request_InitQuoteExRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.InitQuoteExRequest)
  // optional bytes att_key_id = 1;
  if (has_att_key_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->att_key_id(), target);
  }

  // required bool b_pub_key_id = 3;
  if (has_b_pub_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->b_pub_key_id(), target);
  }

  // optional uint64 buf_size = 4;
  if (has_buf_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->buf_size(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.InitQuoteExRequest)
  return target;
}

int Request_InitQuoteExRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes att_key_id = 1;
    if (has_att_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->att_key_id());
    }

    // required bool b_pub_key_id = 3;
    if (has_b_pub_key_id()) {
      total_size += 1 + 1;
    }

    // optional uint64 buf_size = 4;
    if (has_buf_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buf_size());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_InitQuoteExRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_InitQuoteExRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_InitQuoteExRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_InitQuoteExRequest::MergeFrom(const Request_InitQuoteExRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_att_key_id()) {
      set_att_key_id(from.att_key_id());
    }
    if (from.has_b_pub_key_id()) {
      set_b_pub_key_id(from.b_pub_key_id());
    }
    if (from.has_buf_size()) {
      set_buf_size(from.buf_size());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_InitQuoteExRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_InitQuoteExRequest::CopyFrom(const Request_InitQuoteExRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_InitQuoteExRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Request_InitQuoteExRequest::Swap(Request_InitQuoteExRequest* other) {
  if (other != this) {
    std::swap(att_key_id_, other->att_key_id_);
    std::swap(b_pub_key_id_, other->b_pub_key_id_);
    std::swap(buf_size_, other->buf_size_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_InitQuoteExRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_InitQuoteExRequest_descriptor_;
  metadata.reflection = Request_InitQuoteExRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_SelectAttKeyIDRequest::kAttKeyIdListFieldNumber;
const int Request_SelectAttKeyIDRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_SelectAttKeyIDRequest::Request_SelectAttKeyIDRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.SelectAttKeyIDRequest)
}

void Request_SelectAttKeyIDRequest::InitAsDefaultInstance() {
}

Request_SelectAttKeyIDRequest::Request_SelectAttKeyIDRequest(const Request_SelectAttKeyIDRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.SelectAttKeyIDRequest)
}

void Request_SelectAttKeyIDRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  att_key_id_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_SelectAttKeyIDRequest::~Request_SelectAttKeyIDRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.SelectAttKeyIDRequest)
  SharedDtor();
}

void Request_SelectAttKeyIDRequest::SharedDtor() {
  if (att_key_id_list_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete att_key_id_list_;
  }
  if (this != default_instance_) {
  }
}

void Request_SelectAttKeyIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_SelectAttKeyIDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_SelectAttKeyIDRequest_descriptor_;
}

const Request_SelectAttKeyIDRequest& Request_SelectAttKeyIDRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_SelectAttKeyIDRequest* Request_SelectAttKeyIDRequest::default_instance_ = NULL;

Request_SelectAttKeyIDRequest* Request_SelectAttKeyIDRequest::New() const {
  return new Request_SelectAttKeyIDRequest;
}

void Request_SelectAttKeyIDRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_att_key_id_list()) {
      if (att_key_id_list_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        att_key_id_list_->clear();
      }
    }
    timeout_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_SelectAttKeyIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.SelectAttKeyIDRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes att_key_id_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_att_key_id_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 2;
      case 2: {
        if (tag == 16) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.SelectAttKeyIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.SelectAttKeyIDRequest)
  return false;
#undef DO_
}

void Request_SelectAttKeyIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.SelectAttKeyIDRequest)
  // optional bytes att_key_id_list = 1;
  if (has_att_key_id_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->att_key_id_list(), output);
  }

  // optional uint32 timeout = 2;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.SelectAttKeyIDRequest)
}

::google::protobuf::uint8* Request_SelectAttKeyIDRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.SelectAttKeyIDRequest)
  // optional bytes att_key_id_list = 1;
  if (has_att_key_id_list()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->att_key_id_list(), target);
  }

  // optional uint32 timeout = 2;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.SelectAttKeyIDRequest)
  return target;
}

int Request_SelectAttKeyIDRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes att_key_id_list = 1;
    if (has_att_key_id_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->att_key_id_list());
    }

    // optional uint32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_SelectAttKeyIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_SelectAttKeyIDRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_SelectAttKeyIDRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_SelectAttKeyIDRequest::MergeFrom(const Request_SelectAttKeyIDRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_att_key_id_list()) {
      set_att_key_id_list(from.att_key_id_list());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_SelectAttKeyIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_SelectAttKeyIDRequest::CopyFrom(const Request_SelectAttKeyIDRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_SelectAttKeyIDRequest::IsInitialized() const {

  return true;
}

void Request_SelectAttKeyIDRequest::Swap(Request_SelectAttKeyIDRequest* other) {
  if (other != this) {
    std::swap(att_key_id_list_, other->att_key_id_list_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_SelectAttKeyIDRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_SelectAttKeyIDRequest_descriptor_;
  metadata.reflection = Request_SelectAttKeyIDRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_GetQuoteSizeExRequest::kAttKeyIdFieldNumber;
const int Request_GetQuoteSizeExRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_GetQuoteSizeExRequest::Request_GetQuoteSizeExRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetQuoteSizeExRequest)
}

void Request_GetQuoteSizeExRequest::InitAsDefaultInstance() {
}

Request_GetQuoteSizeExRequest::Request_GetQuoteSizeExRequest(const Request_GetQuoteSizeExRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetQuoteSizeExRequest)
}

void Request_GetQuoteSizeExRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  att_key_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetQuoteSizeExRequest::~Request_GetQuoteSizeExRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetQuoteSizeExRequest)
  SharedDtor();
}

void Request_GetQuoteSizeExRequest::SharedDtor() {
  if (att_key_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete att_key_id_;
  }
  if (this != default_instance_) {
  }
}

void Request_GetQuoteSizeExRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetQuoteSizeExRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetQuoteSizeExRequest_descriptor_;
}

const Request_GetQuoteSizeExRequest& Request_GetQuoteSizeExRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_GetQuoteSizeExRequest* Request_GetQuoteSizeExRequest::default_instance_ = NULL;

Request_GetQuoteSizeExRequest* Request_GetQuoteSizeExRequest::New() const {
  return new Request_GetQuoteSizeExRequest;
}

void Request_GetQuoteSizeExRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_att_key_id()) {
      if (att_key_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        att_key_id_->clear();
      }
    }
    timeout_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetQuoteSizeExRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetQuoteSizeExRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes att_key_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_att_key_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetQuoteSizeExRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetQuoteSizeExRequest)
  return false;
#undef DO_
}

void Request_GetQuoteSizeExRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetQuoteSizeExRequest)
  // optional bytes att_key_id = 1;
  if (has_att_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->att_key_id(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetQuoteSizeExRequest)
}

::google::protobuf::uint8* Request_GetQuoteSizeExRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetQuoteSizeExRequest)
  // optional bytes att_key_id = 1;
  if (has_att_key_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->att_key_id(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetQuoteSizeExRequest)
  return target;
}

int Request_GetQuoteSizeExRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes att_key_id = 1;
    if (has_att_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->att_key_id());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetQuoteSizeExRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetQuoteSizeExRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetQuoteSizeExRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetQuoteSizeExRequest::MergeFrom(const Request_GetQuoteSizeExRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_att_key_id()) {
      set_att_key_id(from.att_key_id());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetQuoteSizeExRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetQuoteSizeExRequest::CopyFrom(const Request_GetQuoteSizeExRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetQuoteSizeExRequest::IsInitialized() const {

  return true;
}

void Request_GetQuoteSizeExRequest::Swap(Request_GetQuoteSizeExRequest* other) {
  if (other != this) {
    std::swap(att_key_id_, other->att_key_id_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetQuoteSizeExRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetQuoteSizeExRequest_descriptor_;
  metadata.reflection = Request_GetQuoteSizeExRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_GetQuoteExRequest::kReportFieldNumber;
const int Request_GetQuoteExRequest::kAttKeyIdFieldNumber;
const int Request_GetQuoteExRequest::kQeReportInfoFieldNumber;
const int Request_GetQuoteExRequest::kBufSizeFieldNumber;
const int Request_GetQuoteExRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Request_GetQuoteExRequest::Request_GetQuoteExRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request.GetQuoteExRequest)
}

void Request_GetQuoteExRequest::InitAsDefaultInstance() {
}

Request_GetQuoteExRequest::Request_GetQuoteExRequest(const Request_GetQuoteExRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request.GetQuoteExRequest)
}

void Request_GetQuoteExRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  report_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  att_key_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qe_report_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buf_size_ = 0u;
  timeout_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_GetQuoteExRequest::~Request_GetQuoteExRequest() {
  // @@protoc_insertion_point(destructor:aesm.message.Request.GetQuoteExRequest)
  SharedDtor();
}

void Request_GetQuoteExRequest::SharedDtor() {
  if (report_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete report_;
  }
  if (att_key_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete att_key_id_;
  }
  if (qe_report_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qe_report_info_;
  }
  if (this != default_instance_) {
  }
}

void Request_GetQuoteExRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_GetQuoteExRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_GetQuoteExRequest_descriptor_;
}

const Request_GetQuoteExRequest& Request_GetQuoteExRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_GetQuoteExRequest* Request_GetQuoteExRequest::default_instance_ = NULL;

Request_GetQuoteExRequest* Request_GetQuoteExRequest::New() const {
  return new Request_GetQuoteExRequest;
}

void Request_GetQuoteExRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Request_GetQuoteExRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(buf_size_, timeout_);
    if (has_report()) {
      if (report_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        report_->clear();
      }
    }
    if (has_att_key_id()) {
      if (att_key_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        att_key_id_->clear();
      }
    }
    if (has_qe_report_info()) {
      if (qe_report_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        qe_report_info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_GetQuoteExRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request.GetQuoteExRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes report = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_report()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_att_key_id;
        break;
      }

      // optional bytes att_key_id = 2;
      case 2: {
        if (tag == 18) {
         parse_att_key_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_att_key_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_qe_report_info;
        break;
      }

      // optional bytes qe_report_info = 3;
      case 3: {
        if (tag == 26) {
         parse_qe_report_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qe_report_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buf_size;
        break;
      }

      // required uint32 buf_size = 4;
      case 4: {
        if (tag == 32) {
         parse_buf_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buf_size_)));
          set_has_buf_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeout;
        break;
      }

      // optional uint32 timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request.GetQuoteExRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request.GetQuoteExRequest)
  return false;
#undef DO_
}

void Request_GetQuoteExRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request.GetQuoteExRequest)
  // required bytes report = 1;
  if (has_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->report(), output);
  }

  // optional bytes att_key_id = 2;
  if (has_att_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->att_key_id(), output);
  }

  // optional bytes qe_report_info = 3;
  if (has_qe_report_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->qe_report_info(), output);
  }

  // required uint32 buf_size = 4;
  if (has_buf_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buf_size(), output);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request.GetQuoteExRequest)
}

::google::protobuf::uint8* Request_GetQuoteExRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request.GetQuoteExRequest)
  // required bytes report = 1;
  if (has_report()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->report(), target);
  }

  // optional bytes att_key_id = 2;
  if (has_att_key_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->att_key_id(), target);
  }

  // optional bytes qe_report_info = 3;
  if (has_qe_report_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->qe_report_info(), target);
  }

  // required uint32 buf_size = 4;
  if (has_buf_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buf_size(), target);
  }

  // optional uint32 timeout = 9;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request.GetQuoteExRequest)
  return target;
}

int Request_GetQuoteExRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes report = 1;
    if (has_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->report());
    }

    // optional bytes att_key_id = 2;
    if (has_att_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->att_key_id());
    }

    // optional bytes qe_report_info = 3;
    if (has_qe_report_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qe_report_info());
    }

    // required uint32 buf_size = 4;
    if (has_buf_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buf_size());
    }

    // optional uint32 timeout = 9;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_GetQuoteExRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_GetQuoteExRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_GetQuoteExRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_GetQuoteExRequest::MergeFrom(const Request_GetQuoteExRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_report()) {
      set_report(from.report());
    }
    if (from.has_att_key_id()) {
      set_att_key_id(from.att_key_id());
    }
    if (from.has_qe_report_info()) {
      set_qe_report_info(from.qe_report_info());
    }
    if (from.has_buf_size()) {
      set_buf_size(from.buf_size());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_GetQuoteExRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_GetQuoteExRequest::CopyFrom(const Request_GetQuoteExRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_GetQuoteExRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void Request_GetQuoteExRequest::Swap(Request_GetQuoteExRequest* other) {
  if (other != this) {
    std::swap(report_, other->report_);
    std::swap(att_key_id_, other->att_key_id_);
    std::swap(qe_report_info_, other->qe_report_info_);
    std::swap(buf_size_, other->buf_size_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_GetQuoteExRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_GetQuoteExRequest_descriptor_;
  metadata.reflection = Request_GetQuoteExRequest_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request::kInitQuoteReqFieldNumber;
const int Request::kGetQuoteReqFieldNumber;
const int Request::kGetLicTokenReqFieldNumber;
const int Request::kReportErrReqFieldNumber;
const int Request::kCreateSessionReqFieldNumber;
const int Request::kInvokeServiceReqFieldNumber;
const int Request::kExchangeReportReqFieldNumber;
const int Request::kCloseSessionReqFieldNumber;
const int Request::kGetPsCapReqFieldNumber;
const int Request::kGetWhiteListSizeReqFieldNumber;
const int Request::kGetWhiteListReqFieldNumber;
const int Request::kSgxGetExtendedEpidGroupIdReqFieldNumber;
const int Request::kSgxSwitchExtendedEpidGroupReqFieldNumber;
const int Request::kSgxRegisterReqFieldNumber;
const int Request::kInitQuoteExReqFieldNumber;
const int Request::kGetQuoteSizeExReqFieldNumber;
const int Request::kGetQuoteExReqFieldNumber;
const int Request::kCheckUpdateStatusReqFieldNumber;
const int Request::kSelectAttKeyIDReqFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Request)
}

void Request::InitAsDefaultInstance() {
  initquotereq_ = const_cast< ::aesm::message::Request_InitQuoteRequest*>(&::aesm::message::Request_InitQuoteRequest::default_instance());
  getquotereq_ = const_cast< ::aesm::message::Request_GetQuoteRequest*>(&::aesm::message::Request_GetQuoteRequest::default_instance());
  getlictokenreq_ = const_cast< ::aesm::message::Request_GetLaunchTokenRequest*>(&::aesm::message::Request_GetLaunchTokenRequest::default_instance());
  reporterrreq_ = const_cast< ::aesm::message::Request_ReportAttestationErrorRequest*>(&::aesm::message::Request_ReportAttestationErrorRequest::default_instance());
  createsessionreq_ = const_cast< ::aesm::message::Request_CreateSessionRequest*>(&::aesm::message::Request_CreateSessionRequest::default_instance());
  invokeservicereq_ = const_cast< ::aesm::message::Request_InvokeServiceRequest*>(&::aesm::message::Request_InvokeServiceRequest::default_instance());
  exchangereportreq_ = const_cast< ::aesm::message::Request_ExchangeReportRequest*>(&::aesm::message::Request_ExchangeReportRequest::default_instance());
  closesessionreq_ = const_cast< ::aesm::message::Request_CloseSessionRequest*>(&::aesm::message::Request_CloseSessionRequest::default_instance());
  getpscapreq_ = const_cast< ::aesm::message::Request_GetPsCapRequest*>(&::aesm::message::Request_GetPsCapRequest::default_instance());
  getwhitelistsizereq_ = const_cast< ::aesm::message::Request_GetWhiteListSizeRequest*>(&::aesm::message::Request_GetWhiteListSizeRequest::default_instance());
  getwhitelistreq_ = const_cast< ::aesm::message::Request_GetWhiteListRequest*>(&::aesm::message::Request_GetWhiteListRequest::default_instance());
  sgxgetextendedepidgroupidreq_ = const_cast< ::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest*>(&::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest::default_instance());
  sgxswitchextendedepidgroupreq_ = const_cast< ::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest*>(&::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest::default_instance());
  sgxregisterreq_ = const_cast< ::aesm::message::Request_SGXRegisterRequest*>(&::aesm::message::Request_SGXRegisterRequest::default_instance());
  initquoteexreq_ = const_cast< ::aesm::message::Request_InitQuoteExRequest*>(&::aesm::message::Request_InitQuoteExRequest::default_instance());
  getquotesizeexreq_ = const_cast< ::aesm::message::Request_GetQuoteSizeExRequest*>(&::aesm::message::Request_GetQuoteSizeExRequest::default_instance());
  getquoteexreq_ = const_cast< ::aesm::message::Request_GetQuoteExRequest*>(&::aesm::message::Request_GetQuoteExRequest::default_instance());
  checkupdatestatusreq_ = const_cast< ::aesm::message::Request_CheckUpdateStatusRequest*>(&::aesm::message::Request_CheckUpdateStatusRequest::default_instance());
  selectattkeyidreq_ = const_cast< ::aesm::message::Request_SelectAttKeyIDRequest*>(&::aesm::message::Request_SelectAttKeyIDRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  initquotereq_ = NULL;
  getquotereq_ = NULL;
  getlictokenreq_ = NULL;
  reporterrreq_ = NULL;
  createsessionreq_ = NULL;
  invokeservicereq_ = NULL;
  exchangereportreq_ = NULL;
  closesessionreq_ = NULL;
  getpscapreq_ = NULL;
  getwhitelistsizereq_ = NULL;
  getwhitelistreq_ = NULL;
  sgxgetextendedepidgroupidreq_ = NULL;
  sgxswitchextendedepidgroupreq_ = NULL;
  sgxregisterreq_ = NULL;
  initquoteexreq_ = NULL;
  getquotesizeexreq_ = NULL;
  getquoteexreq_ = NULL;
  checkupdatestatusreq_ = NULL;
  selectattkeyidreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:aesm.message.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete initquotereq_;
    delete getquotereq_;
    delete getlictokenreq_;
    delete reporterrreq_;
    delete createsessionreq_;
    delete invokeservicereq_;
    delete exchangereportreq_;
    delete closesessionreq_;
    delete getpscapreq_;
    delete getwhitelistsizereq_;
    delete getwhitelistreq_;
    delete sgxgetextendedepidgroupidreq_;
    delete sgxswitchextendedepidgroupreq_;
    delete sgxregisterreq_;
    delete initquoteexreq_;
    delete getquotesizeexreq_;
    delete getquoteexreq_;
    delete checkupdatestatusreq_;
    delete selectattkeyidreq_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_initquotereq()) {
      if (initquotereq_ != NULL) initquotereq_->::aesm::message::Request_InitQuoteRequest::Clear();
    }
    if (has_getquotereq()) {
      if (getquotereq_ != NULL) getquotereq_->::aesm::message::Request_GetQuoteRequest::Clear();
    }
    if (has_getlictokenreq()) {
      if (getlictokenreq_ != NULL) getlictokenreq_->::aesm::message::Request_GetLaunchTokenRequest::Clear();
    }
    if (has_reporterrreq()) {
      if (reporterrreq_ != NULL) reporterrreq_->::aesm::message::Request_ReportAttestationErrorRequest::Clear();
    }
    if (has_createsessionreq()) {
      if (createsessionreq_ != NULL) createsessionreq_->::aesm::message::Request_CreateSessionRequest::Clear();
    }
    if (has_invokeservicereq()) {
      if (invokeservicereq_ != NULL) invokeservicereq_->::aesm::message::Request_InvokeServiceRequest::Clear();
    }
    if (has_exchangereportreq()) {
      if (exchangereportreq_ != NULL) exchangereportreq_->::aesm::message::Request_ExchangeReportRequest::Clear();
    }
    if (has_closesessionreq()) {
      if (closesessionreq_ != NULL) closesessionreq_->::aesm::message::Request_CloseSessionRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_getpscapreq()) {
      if (getpscapreq_ != NULL) getpscapreq_->::aesm::message::Request_GetPsCapRequest::Clear();
    }
    if (has_getwhitelistsizereq()) {
      if (getwhitelistsizereq_ != NULL) getwhitelistsizereq_->::aesm::message::Request_GetWhiteListSizeRequest::Clear();
    }
    if (has_getwhitelistreq()) {
      if (getwhitelistreq_ != NULL) getwhitelistreq_->::aesm::message::Request_GetWhiteListRequest::Clear();
    }
    if (has_sgxgetextendedepidgroupidreq()) {
      if (sgxgetextendedepidgroupidreq_ != NULL) sgxgetextendedepidgroupidreq_->::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest::Clear();
    }
    if (has_sgxswitchextendedepidgroupreq()) {
      if (sgxswitchextendedepidgroupreq_ != NULL) sgxswitchextendedepidgroupreq_->::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest::Clear();
    }
    if (has_sgxregisterreq()) {
      if (sgxregisterreq_ != NULL) sgxregisterreq_->::aesm::message::Request_SGXRegisterRequest::Clear();
    }
    if (has_initquoteexreq()) {
      if (initquoteexreq_ != NULL) initquoteexreq_->::aesm::message::Request_InitQuoteExRequest::Clear();
    }
    if (has_getquotesizeexreq()) {
      if (getquotesizeexreq_ != NULL) getquotesizeexreq_->::aesm::message::Request_GetQuoteSizeExRequest::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 458752) {
    if (has_getquoteexreq()) {
      if (getquoteexreq_ != NULL) getquoteexreq_->::aesm::message::Request_GetQuoteExRequest::Clear();
    }
    if (has_checkupdatestatusreq()) {
      if (checkupdatestatusreq_ != NULL) checkupdatestatusreq_->::aesm::message::Request_CheckUpdateStatusRequest::Clear();
    }
    if (has_selectattkeyidreq()) {
      if (selectattkeyidreq_ != NULL) selectattkeyidreq_->::aesm::message::Request_SelectAttKeyIDRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initquotereq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_getQuoteReq;
        break;
      }

      // optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
      case 2: {
        if (tag == 18) {
         parse_getQuoteReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getquotereq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_getLicTokenReq;
        break;
      }

      // optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
      case 3: {
        if (tag == 26) {
         parse_getLicTokenReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getlictokenreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reportErrReq;
        break;
      }

      // optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
      case 4: {
        if (tag == 34) {
         parse_reportErrReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reporterrreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_createSessionReq;
        break;
      }

      // optional .aesm.message.Request.CreateSessionRequest createSessionReq = 5;
      case 5: {
        if (tag == 42) {
         parse_createSessionReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createsessionreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_invokeServiceReq;
        break;
      }

      // optional .aesm.message.Request.InvokeServiceRequest invokeServiceReq = 6;
      case 6: {
        if (tag == 50) {
         parse_invokeServiceReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invokeservicereq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_exchangeReportReq;
        break;
      }

      // optional .aesm.message.Request.ExchangeReportRequest exchangeReportReq = 7;
      case 7: {
        if (tag == 58) {
         parse_exchangeReportReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exchangereportreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_closeSessionReq;
        break;
      }

      // optional .aesm.message.Request.CloseSessionRequest closeSessionReq = 8;
      case 8: {
        if (tag == 66) {
         parse_closeSessionReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closesessionreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_getPsCapReq;
        break;
      }

      // optional .aesm.message.Request.GetPsCapRequest getPsCapReq = 9;
      case 9: {
        if (tag == 74) {
         parse_getPsCapReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getpscapreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_getWhiteListSizeReq;
        break;
      }

      // optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
      case 10: {
        if (tag == 82) {
         parse_getWhiteListSizeReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getwhitelistsizereq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_getWhiteListReq;
        break;
      }

      // optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
      case 11: {
        if (tag == 90) {
         parse_getWhiteListReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getwhitelistreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sgxGetExtendedEpidGroupIdReq;
        break;
      }

      // optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
      case 12: {
        if (tag == 98) {
         parse_sgxGetExtendedEpidGroupIdReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgxgetextendedepidgroupidreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_sgxSwitchExtendedEpidGroupReq;
        break;
      }

      // optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
      case 13: {
        if (tag == 106) {
         parse_sgxSwitchExtendedEpidGroupReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgxswitchextendedepidgroupreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_sgxRegisterReq;
        break;
      }

      // optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
      case 14: {
        if (tag == 114) {
         parse_sgxRegisterReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgxregisterreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_initQuoteExReq;
        break;
      }

      // optional .aesm.message.Request.InitQuoteExRequest initQuoteExReq = 15;
      case 15: {
        if (tag == 122) {
         parse_initQuoteExReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initquoteexreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_getQuoteSizeExReq;
        break;
      }

      // optional .aesm.message.Request.GetQuoteSizeExRequest getQuoteSizeExReq = 16;
      case 16: {
        if (tag == 130) {
         parse_getQuoteSizeExReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getquotesizeexreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_getQuoteExReq;
        break;
      }

      // optional .aesm.message.Request.GetQuoteExRequest getQuoteExReq = 17;
      case 17: {
        if (tag == 138) {
         parse_getQuoteExReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getquoteexreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_checkUpdateStatusReq;
        break;
      }

      // optional .aesm.message.Request.CheckUpdateStatusRequest checkUpdateStatusReq = 18;
      case 18: {
        if (tag == 146) {
         parse_checkUpdateStatusReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_checkupdatestatusreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_selectAttKeyIDReq;
        break;
      }

      // optional .aesm.message.Request.SelectAttKeyIDRequest selectAttKeyIDReq = 19;
      case 19: {
        if (tag == 154) {
         parse_selectAttKeyIDReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selectattkeyidreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Request)
  // optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
  if (has_initquotereq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->initquotereq(), output);
  }

  // optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
  if (has_getquotereq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->getquotereq(), output);
  }

  // optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
  if (has_getlictokenreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->getlictokenreq(), output);
  }

  // optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
  if (has_reporterrreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reporterrreq(), output);
  }

  // optional .aesm.message.Request.CreateSessionRequest createSessionReq = 5;
  if (has_createsessionreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->createsessionreq(), output);
  }

  // optional .aesm.message.Request.InvokeServiceRequest invokeServiceReq = 6;
  if (has_invokeservicereq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->invokeservicereq(), output);
  }

  // optional .aesm.message.Request.ExchangeReportRequest exchangeReportReq = 7;
  if (has_exchangereportreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->exchangereportreq(), output);
  }

  // optional .aesm.message.Request.CloseSessionRequest closeSessionReq = 8;
  if (has_closesessionreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->closesessionreq(), output);
  }

  // optional .aesm.message.Request.GetPsCapRequest getPsCapReq = 9;
  if (has_getpscapreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->getpscapreq(), output);
  }

  // optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
  if (has_getwhitelistsizereq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->getwhitelistsizereq(), output);
  }

  // optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
  if (has_getwhitelistreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->getwhitelistreq(), output);
  }

  // optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
  if (has_sgxgetextendedepidgroupidreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->sgxgetextendedepidgroupidreq(), output);
  }

  // optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
  if (has_sgxswitchextendedepidgroupreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->sgxswitchextendedepidgroupreq(), output);
  }

  // optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
  if (has_sgxregisterreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->sgxregisterreq(), output);
  }

  // optional .aesm.message.Request.InitQuoteExRequest initQuoteExReq = 15;
  if (has_initquoteexreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->initquoteexreq(), output);
  }

  // optional .aesm.message.Request.GetQuoteSizeExRequest getQuoteSizeExReq = 16;
  if (has_getquotesizeexreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->getquotesizeexreq(), output);
  }

  // optional .aesm.message.Request.GetQuoteExRequest getQuoteExReq = 17;
  if (has_getquoteexreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->getquoteexreq(), output);
  }

  // optional .aesm.message.Request.CheckUpdateStatusRequest checkUpdateStatusReq = 18;
  if (has_checkupdatestatusreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->checkupdatestatusreq(), output);
  }

  // optional .aesm.message.Request.SelectAttKeyIDRequest selectAttKeyIDReq = 19;
  if (has_selectattkeyidreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->selectattkeyidreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Request)
  // optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
  if (has_initquotereq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->initquotereq(), target);
  }

  // optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
  if (has_getquotereq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->getquotereq(), target);
  }

  // optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
  if (has_getlictokenreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->getlictokenreq(), target);
  }

  // optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
  if (has_reporterrreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reporterrreq(), target);
  }

  // optional .aesm.message.Request.CreateSessionRequest createSessionReq = 5;
  if (has_createsessionreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->createsessionreq(), target);
  }

  // optional .aesm.message.Request.InvokeServiceRequest invokeServiceReq = 6;
  if (has_invokeservicereq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->invokeservicereq(), target);
  }

  // optional .aesm.message.Request.ExchangeReportRequest exchangeReportReq = 7;
  if (has_exchangereportreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->exchangereportreq(), target);
  }

  // optional .aesm.message.Request.CloseSessionRequest closeSessionReq = 8;
  if (has_closesessionreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->closesessionreq(), target);
  }

  // optional .aesm.message.Request.GetPsCapRequest getPsCapReq = 9;
  if (has_getpscapreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->getpscapreq(), target);
  }

  // optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
  if (has_getwhitelistsizereq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->getwhitelistsizereq(), target);
  }

  // optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
  if (has_getwhitelistreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->getwhitelistreq(), target);
  }

  // optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
  if (has_sgxgetextendedepidgroupidreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->sgxgetextendedepidgroupidreq(), target);
  }

  // optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
  if (has_sgxswitchextendedepidgroupreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->sgxswitchextendedepidgroupreq(), target);
  }

  // optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
  if (has_sgxregisterreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->sgxregisterreq(), target);
  }

  // optional .aesm.message.Request.InitQuoteExRequest initQuoteExReq = 15;
  if (has_initquoteexreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->initquoteexreq(), target);
  }

  // optional .aesm.message.Request.GetQuoteSizeExRequest getQuoteSizeExReq = 16;
  if (has_getquotesizeexreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->getquotesizeexreq(), target);
  }

  // optional .aesm.message.Request.GetQuoteExRequest getQuoteExReq = 17;
  if (has_getquoteexreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->getquoteexreq(), target);
  }

  // optional .aesm.message.Request.CheckUpdateStatusRequest checkUpdateStatusReq = 18;
  if (has_checkupdatestatusreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->checkupdatestatusreq(), target);
  }

  // optional .aesm.message.Request.SelectAttKeyIDRequest selectAttKeyIDReq = 19;
  if (has_selectattkeyidreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->selectattkeyidreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .aesm.message.Request.InitQuoteRequest initQuoteReq = 1;
    if (has_initquotereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initquotereq());
    }

    // optional .aesm.message.Request.GetQuoteRequest getQuoteReq = 2;
    if (has_getquotereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getquotereq());
    }

    // optional .aesm.message.Request.GetLaunchTokenRequest getLicTokenReq = 3;
    if (has_getlictokenreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getlictokenreq());
    }

    // optional .aesm.message.Request.ReportAttestationErrorRequest reportErrReq = 4;
    if (has_reporterrreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reporterrreq());
    }

    // optional .aesm.message.Request.CreateSessionRequest createSessionReq = 5;
    if (has_createsessionreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->createsessionreq());
    }

    // optional .aesm.message.Request.InvokeServiceRequest invokeServiceReq = 6;
    if (has_invokeservicereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invokeservicereq());
    }

    // optional .aesm.message.Request.ExchangeReportRequest exchangeReportReq = 7;
    if (has_exchangereportreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exchangereportreq());
    }

    // optional .aesm.message.Request.CloseSessionRequest closeSessionReq = 8;
    if (has_closesessionreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->closesessionreq());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .aesm.message.Request.GetPsCapRequest getPsCapReq = 9;
    if (has_getpscapreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getpscapreq());
    }

    // optional .aesm.message.Request.GetWhiteListSizeRequest getWhiteListSizeReq = 10;
    if (has_getwhitelistsizereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getwhitelistsizereq());
    }

    // optional .aesm.message.Request.GetWhiteListRequest getWhiteListReq = 11;
    if (has_getwhitelistreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getwhitelistreq());
    }

    // optional .aesm.message.Request.SGXGetExtendedEpidGroupIdRequest sgxGetExtendedEpidGroupIdReq = 12;
    if (has_sgxgetextendedepidgroupidreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sgxgetextendedepidgroupidreq());
    }

    // optional .aesm.message.Request.SGXSwitchExtendedEpidGroupRequest sgxSwitchExtendedEpidGroupReq = 13;
    if (has_sgxswitchextendedepidgroupreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sgxswitchextendedepidgroupreq());
    }

    // optional .aesm.message.Request.SGXRegisterRequest sgxRegisterReq = 14;
    if (has_sgxregisterreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sgxregisterreq());
    }

    // optional .aesm.message.Request.InitQuoteExRequest initQuoteExReq = 15;
    if (has_initquoteexreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initquoteexreq());
    }

    // optional .aesm.message.Request.GetQuoteSizeExRequest getQuoteSizeExReq = 16;
    if (has_getquotesizeexreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getquotesizeexreq());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .aesm.message.Request.GetQuoteExRequest getQuoteExReq = 17;
    if (has_getquoteexreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getquoteexreq());
    }

    // optional .aesm.message.Request.CheckUpdateStatusRequest checkUpdateStatusReq = 18;
    if (has_checkupdatestatusreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->checkupdatestatusreq());
    }

    // optional .aesm.message.Request.SelectAttKeyIDRequest selectAttKeyIDReq = 19;
    if (has_selectattkeyidreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selectattkeyidreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initquotereq()) {
      mutable_initquotereq()->::aesm::message::Request_InitQuoteRequest::MergeFrom(from.initquotereq());
    }
    if (from.has_getquotereq()) {
      mutable_getquotereq()->::aesm::message::Request_GetQuoteRequest::MergeFrom(from.getquotereq());
    }
    if (from.has_getlictokenreq()) {
      mutable_getlictokenreq()->::aesm::message::Request_GetLaunchTokenRequest::MergeFrom(from.getlictokenreq());
    }
    if (from.has_reporterrreq()) {
      mutable_reporterrreq()->::aesm::message::Request_ReportAttestationErrorRequest::MergeFrom(from.reporterrreq());
    }
    if (from.has_createsessionreq()) {
      mutable_createsessionreq()->::aesm::message::Request_CreateSessionRequest::MergeFrom(from.createsessionreq());
    }
    if (from.has_invokeservicereq()) {
      mutable_invokeservicereq()->::aesm::message::Request_InvokeServiceRequest::MergeFrom(from.invokeservicereq());
    }
    if (from.has_exchangereportreq()) {
      mutable_exchangereportreq()->::aesm::message::Request_ExchangeReportRequest::MergeFrom(from.exchangereportreq());
    }
    if (from.has_closesessionreq()) {
      mutable_closesessionreq()->::aesm::message::Request_CloseSessionRequest::MergeFrom(from.closesessionreq());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_getpscapreq()) {
      mutable_getpscapreq()->::aesm::message::Request_GetPsCapRequest::MergeFrom(from.getpscapreq());
    }
    if (from.has_getwhitelistsizereq()) {
      mutable_getwhitelistsizereq()->::aesm::message::Request_GetWhiteListSizeRequest::MergeFrom(from.getwhitelistsizereq());
    }
    if (from.has_getwhitelistreq()) {
      mutable_getwhitelistreq()->::aesm::message::Request_GetWhiteListRequest::MergeFrom(from.getwhitelistreq());
    }
    if (from.has_sgxgetextendedepidgroupidreq()) {
      mutable_sgxgetextendedepidgroupidreq()->::aesm::message::Request_SGXGetExtendedEpidGroupIdRequest::MergeFrom(from.sgxgetextendedepidgroupidreq());
    }
    if (from.has_sgxswitchextendedepidgroupreq()) {
      mutable_sgxswitchextendedepidgroupreq()->::aesm::message::Request_SGXSwitchExtendedEpidGroupRequest::MergeFrom(from.sgxswitchextendedepidgroupreq());
    }
    if (from.has_sgxregisterreq()) {
      mutable_sgxregisterreq()->::aesm::message::Request_SGXRegisterRequest::MergeFrom(from.sgxregisterreq());
    }
    if (from.has_initquoteexreq()) {
      mutable_initquoteexreq()->::aesm::message::Request_InitQuoteExRequest::MergeFrom(from.initquoteexreq());
    }
    if (from.has_getquotesizeexreq()) {
      mutable_getquotesizeexreq()->::aesm::message::Request_GetQuoteSizeExRequest::MergeFrom(from.getquotesizeexreq());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_getquoteexreq()) {
      mutable_getquoteexreq()->::aesm::message::Request_GetQuoteExRequest::MergeFrom(from.getquoteexreq());
    }
    if (from.has_checkupdatestatusreq()) {
      mutable_checkupdatestatusreq()->::aesm::message::Request_CheckUpdateStatusRequest::MergeFrom(from.checkupdatestatusreq());
    }
    if (from.has_selectattkeyidreq()) {
      mutable_selectattkeyidreq()->::aesm::message::Request_SelectAttKeyIDRequest::MergeFrom(from.selectattkeyidreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  if (has_getquotereq()) {
    if (!this->getquotereq().IsInitialized()) return false;
  }
  if (has_getlictokenreq()) {
    if (!this->getlictokenreq().IsInitialized()) return false;
  }
  if (has_reporterrreq()) {
    if (!this->reporterrreq().IsInitialized()) return false;
  }
  if (has_createsessionreq()) {
    if (!this->createsessionreq().IsInitialized()) return false;
  }
  if (has_invokeservicereq()) {
    if (!this->invokeservicereq().IsInitialized()) return false;
  }
  if (has_exchangereportreq()) {
    if (!this->exchangereportreq().IsInitialized()) return false;
  }
  if (has_closesessionreq()) {
    if (!this->closesessionreq().IsInitialized()) return false;
  }
  if (has_sgxregisterreq()) {
    if (!this->sgxregisterreq().IsInitialized()) return false;
  }
  if (has_initquoteexreq()) {
    if (!this->initquoteexreq().IsInitialized()) return false;
  }
  if (has_getquoteexreq()) {
    if (!this->getquoteexreq().IsInitialized()) return false;
  }
  if (has_checkupdatestatusreq()) {
    if (!this->checkupdatestatusreq().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(initquotereq_, other->initquotereq_);
    std::swap(getquotereq_, other->getquotereq_);
    std::swap(getlictokenreq_, other->getlictokenreq_);
    std::swap(reporterrreq_, other->reporterrreq_);
    std::swap(createsessionreq_, other->createsessionreq_);
    std::swap(invokeservicereq_, other->invokeservicereq_);
    std::swap(exchangereportreq_, other->exchangereportreq_);
    std::swap(closesessionreq_, other->closesessionreq_);
    std::swap(getpscapreq_, other->getpscapreq_);
    std::swap(getwhitelistsizereq_, other->getwhitelistsizereq_);
    std::swap(getwhitelistreq_, other->getwhitelistreq_);
    std::swap(sgxgetextendedepidgroupidreq_, other->sgxgetextendedepidgroupidreq_);
    std::swap(sgxswitchextendedepidgroupreq_, other->sgxswitchextendedepidgroupreq_);
    std::swap(sgxregisterreq_, other->sgxregisterreq_);
    std::swap(initquoteexreq_, other->initquoteexreq_);
    std::swap(getquotesizeexreq_, other->getquotesizeexreq_);
    std::swap(getquoteexreq_, other->getquoteexreq_);
    std::swap(checkupdatestatusreq_, other->checkupdatestatusreq_);
    std::swap(selectattkeyidreq_, other->selectattkeyidreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response_InitQuoteResponse::kErrorCodeFieldNumber;
const int Response_InitQuoteResponse::kTargetInfoFieldNumber;
const int Response_InitQuoteResponse::kGidFieldNumber;
#endif  // !_MSC_VER

Response_InitQuoteResponse::Response_InitQuoteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.InitQuoteResponse)
}

void Response_InitQuoteResponse::InitAsDefaultInstance() {
}

Response_InitQuoteResponse::Response_InitQuoteResponse(const Response_InitQuoteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.InitQuoteResponse)
}

void Response_InitQuoteResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  targetinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_InitQuoteResponse::~Response_InitQuoteResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.InitQuoteResponse)
  SharedDtor();
}

void Response_InitQuoteResponse::SharedDtor() {
  if (targetinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetinfo_;
  }
  if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gid_;
  }
  if (this != default_instance_) {
  }
}

void Response_InitQuoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_InitQuoteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_InitQuoteResponse_descriptor_;
}

const Response_InitQuoteResponse& Response_InitQuoteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_InitQuoteResponse* Response_InitQuoteResponse::default_instance_ = NULL;

Response_InitQuoteResponse* Response_InitQuoteResponse::New() const {
  return new Response_InitQuoteResponse;
}

void Response_InitQuoteResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    errorcode_ = 1u;
    if (has_targetinfo()) {
      if (targetinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        targetinfo_->clear();
      }
    }
    if (has_gid()) {
      if (gid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_InitQuoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.InitQuoteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_targetInfo;
        break;
      }

      // optional bytes targetInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_targetInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_targetinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gid;
        break;
      }

      // optional bytes gid = 3;
      case 3: {
        if (tag == 26) {
         parse_gid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_gid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.InitQuoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.InitQuoteResponse)
  return false;
#undef DO_
}

void Response_InitQuoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.InitQuoteResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes targetInfo = 2;
  if (has_targetinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->targetinfo(), output);
  }

  // optional bytes gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->gid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.InitQuoteResponse)
}

::google::protobuf::uint8* Response_InitQuoteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.InitQuoteResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes targetInfo = 2;
  if (has_targetinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->targetinfo(), target);
  }

  // optional bytes gid = 3;
  if (has_gid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->gid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.InitQuoteResponse)
  return target;
}

int Response_InitQuoteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional bytes targetInfo = 2;
    if (has_targetinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->targetinfo());
    }

    // optional bytes gid = 3;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->gid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_InitQuoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_InitQuoteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_InitQuoteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_InitQuoteResponse::MergeFrom(const Response_InitQuoteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_targetinfo()) {
      set_targetinfo(from.targetinfo());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_InitQuoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_InitQuoteResponse::CopyFrom(const Response_InitQuoteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_InitQuoteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_InitQuoteResponse::Swap(Response_InitQuoteResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(targetinfo_, other->targetinfo_);
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_InitQuoteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_InitQuoteResponse_descriptor_;
  metadata.reflection = Response_InitQuoteResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetQuoteResponse::kErrorCodeFieldNumber;
const int Response_GetQuoteResponse::kQuoteFieldNumber;
const int Response_GetQuoteResponse::kQeReportFieldNumber;
#endif  // !_MSC_VER

Response_GetQuoteResponse::Response_GetQuoteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetQuoteResponse)
}

void Response_GetQuoteResponse::InitAsDefaultInstance() {
}

Response_GetQuoteResponse::Response_GetQuoteResponse(const Response_GetQuoteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetQuoteResponse)
}

void Response_GetQuoteResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  quote_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qe_report_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetQuoteResponse::~Response_GetQuoteResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetQuoteResponse)
  SharedDtor();
}

void Response_GetQuoteResponse::SharedDtor() {
  if (quote_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quote_;
  }
  if (qe_report_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qe_report_;
  }
  if (this != default_instance_) {
  }
}

void Response_GetQuoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetQuoteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetQuoteResponse_descriptor_;
}

const Response_GetQuoteResponse& Response_GetQuoteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_GetQuoteResponse* Response_GetQuoteResponse::default_instance_ = NULL;

Response_GetQuoteResponse* Response_GetQuoteResponse::New() const {
  return new Response_GetQuoteResponse;
}

void Response_GetQuoteResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    errorcode_ = 1u;
    if (has_quote()) {
      if (quote_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quote_->clear();
      }
    }
    if (has_qe_report()) {
      if (qe_report_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        qe_report_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetQuoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetQuoteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_quote;
        break;
      }

      // optional bytes quote = 2;
      case 2: {
        if (tag == 18) {
         parse_quote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quote()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_qe_report;
        break;
      }

      // optional bytes qe_report = 3;
      case 3: {
        if (tag == 26) {
         parse_qe_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qe_report()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetQuoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetQuoteResponse)
  return false;
#undef DO_
}

void Response_GetQuoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetQuoteResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes quote = 2;
  if (has_quote()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->quote(), output);
  }

  // optional bytes qe_report = 3;
  if (has_qe_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->qe_report(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetQuoteResponse)
}

::google::protobuf::uint8* Response_GetQuoteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetQuoteResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes quote = 2;
  if (has_quote()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->quote(), target);
  }

  // optional bytes qe_report = 3;
  if (has_qe_report()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->qe_report(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetQuoteResponse)
  return target;
}

int Response_GetQuoteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional bytes quote = 2;
    if (has_quote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->quote());
    }

    // optional bytes qe_report = 3;
    if (has_qe_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qe_report());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetQuoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetQuoteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetQuoteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetQuoteResponse::MergeFrom(const Response_GetQuoteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_quote()) {
      set_quote(from.quote());
    }
    if (from.has_qe_report()) {
      set_qe_report(from.qe_report());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetQuoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetQuoteResponse::CopyFrom(const Response_GetQuoteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetQuoteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_GetQuoteResponse::Swap(Response_GetQuoteResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(quote_, other->quote_);
    std::swap(qe_report_, other->qe_report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetQuoteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetQuoteResponse_descriptor_;
  metadata.reflection = Response_GetQuoteResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetLaunchTokenResponse::kErrorCodeFieldNumber;
const int Response_GetLaunchTokenResponse::kTokenFieldNumber;
#endif  // !_MSC_VER

Response_GetLaunchTokenResponse::Response_GetLaunchTokenResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetLaunchTokenResponse)
}

void Response_GetLaunchTokenResponse::InitAsDefaultInstance() {
}

Response_GetLaunchTokenResponse::Response_GetLaunchTokenResponse(const Response_GetLaunchTokenResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetLaunchTokenResponse)
}

void Response_GetLaunchTokenResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetLaunchTokenResponse::~Response_GetLaunchTokenResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetLaunchTokenResponse)
  SharedDtor();
}

void Response_GetLaunchTokenResponse::SharedDtor() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void Response_GetLaunchTokenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetLaunchTokenResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetLaunchTokenResponse_descriptor_;
}

const Response_GetLaunchTokenResponse& Response_GetLaunchTokenResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_GetLaunchTokenResponse* Response_GetLaunchTokenResponse::default_instance_ = NULL;

Response_GetLaunchTokenResponse* Response_GetLaunchTokenResponse::New() const {
  return new Response_GetLaunchTokenResponse;
}

void Response_GetLaunchTokenResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errorcode_ = 1u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetLaunchTokenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetLaunchTokenResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // optional bytes token = 2;
      case 2: {
        if (tag == 18) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetLaunchTokenResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetLaunchTokenResponse)
  return false;
#undef DO_
}

void Response_GetLaunchTokenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetLaunchTokenResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetLaunchTokenResponse)
}

::google::protobuf::uint8* Response_GetLaunchTokenResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetLaunchTokenResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes token = 2;
  if (has_token()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetLaunchTokenResponse)
  return target;
}

int Response_GetLaunchTokenResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional bytes token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetLaunchTokenResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetLaunchTokenResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetLaunchTokenResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetLaunchTokenResponse::MergeFrom(const Response_GetLaunchTokenResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetLaunchTokenResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetLaunchTokenResponse::CopyFrom(const Response_GetLaunchTokenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetLaunchTokenResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_GetLaunchTokenResponse::Swap(Response_GetLaunchTokenResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetLaunchTokenResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetLaunchTokenResponse_descriptor_;
  metadata.reflection = Response_GetLaunchTokenResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_ReportAttestationErrorResponse::kErrorCodeFieldNumber;
const int Response_ReportAttestationErrorResponse::kPlatformUpdateInfoFieldNumber;
#endif  // !_MSC_VER

Response_ReportAttestationErrorResponse::Response_ReportAttestationErrorResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.ReportAttestationErrorResponse)
}

void Response_ReportAttestationErrorResponse::InitAsDefaultInstance() {
}

Response_ReportAttestationErrorResponse::Response_ReportAttestationErrorResponse(const Response_ReportAttestationErrorResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.ReportAttestationErrorResponse)
}

void Response_ReportAttestationErrorResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  platform_update_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_ReportAttestationErrorResponse::~Response_ReportAttestationErrorResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.ReportAttestationErrorResponse)
  SharedDtor();
}

void Response_ReportAttestationErrorResponse::SharedDtor() {
  if (platform_update_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_update_info_;
  }
  if (this != default_instance_) {
  }
}

void Response_ReportAttestationErrorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_ReportAttestationErrorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_ReportAttestationErrorResponse_descriptor_;
}

const Response_ReportAttestationErrorResponse& Response_ReportAttestationErrorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_ReportAttestationErrorResponse* Response_ReportAttestationErrorResponse::default_instance_ = NULL;

Response_ReportAttestationErrorResponse* Response_ReportAttestationErrorResponse::New() const {
  return new Response_ReportAttestationErrorResponse;
}

void Response_ReportAttestationErrorResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errorcode_ = 1u;
    if (has_platform_update_info()) {
      if (platform_update_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_update_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_ReportAttestationErrorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.ReportAttestationErrorResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_platform_update_info;
        break;
      }

      // optional bytes platform_update_info = 2;
      case 2: {
        if (tag == 18) {
         parse_platform_update_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_update_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.ReportAttestationErrorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.ReportAttestationErrorResponse)
  return false;
#undef DO_
}

void Response_ReportAttestationErrorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.ReportAttestationErrorResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes platform_update_info = 2;
  if (has_platform_update_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->platform_update_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.ReportAttestationErrorResponse)
}

::google::protobuf::uint8* Response_ReportAttestationErrorResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.ReportAttestationErrorResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes platform_update_info = 2;
  if (has_platform_update_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->platform_update_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.ReportAttestationErrorResponse)
  return target;
}

int Response_ReportAttestationErrorResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional bytes platform_update_info = 2;
    if (has_platform_update_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_update_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_ReportAttestationErrorResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_ReportAttestationErrorResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_ReportAttestationErrorResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_ReportAttestationErrorResponse::MergeFrom(const Response_ReportAttestationErrorResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_platform_update_info()) {
      set_platform_update_info(from.platform_update_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_ReportAttestationErrorResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_ReportAttestationErrorResponse::CopyFrom(const Response_ReportAttestationErrorResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_ReportAttestationErrorResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_ReportAttestationErrorResponse::Swap(Response_ReportAttestationErrorResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(platform_update_info_, other->platform_update_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_ReportAttestationErrorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_ReportAttestationErrorResponse_descriptor_;
  metadata.reflection = Response_ReportAttestationErrorResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_CheckUpdateStatusResponse::kErrorCodeFieldNumber;
const int Response_CheckUpdateStatusResponse::kPlatformUpdateInfoFieldNumber;
const int Response_CheckUpdateStatusResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

Response_CheckUpdateStatusResponse::Response_CheckUpdateStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.CheckUpdateStatusResponse)
}

void Response_CheckUpdateStatusResponse::InitAsDefaultInstance() {
}

Response_CheckUpdateStatusResponse::Response_CheckUpdateStatusResponse(const Response_CheckUpdateStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.CheckUpdateStatusResponse)
}

void Response_CheckUpdateStatusResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  platform_update_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_CheckUpdateStatusResponse::~Response_CheckUpdateStatusResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.CheckUpdateStatusResponse)
  SharedDtor();
}

void Response_CheckUpdateStatusResponse::SharedDtor() {
  if (platform_update_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_update_info_;
  }
  if (this != default_instance_) {
  }
}

void Response_CheckUpdateStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_CheckUpdateStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_CheckUpdateStatusResponse_descriptor_;
}

const Response_CheckUpdateStatusResponse& Response_CheckUpdateStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_CheckUpdateStatusResponse* Response_CheckUpdateStatusResponse::default_instance_ = NULL;

Response_CheckUpdateStatusResponse* Response_CheckUpdateStatusResponse::New() const {
  return new Response_CheckUpdateStatusResponse;
}

void Response_CheckUpdateStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    errorcode_ = 1u;
    if (has_platform_update_info()) {
      if (platform_update_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_update_info_->clear();
      }
    }
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_CheckUpdateStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.CheckUpdateStatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_platform_update_info;
        break;
      }

      // optional bytes platform_update_info = 2;
      case 2: {
        if (tag == 18) {
         parse_platform_update_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_platform_update_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.CheckUpdateStatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.CheckUpdateStatusResponse)
  return false;
#undef DO_
}

void Response_CheckUpdateStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.CheckUpdateStatusResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes platform_update_info = 2;
  if (has_platform_update_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->platform_update_info(), output);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.CheckUpdateStatusResponse)
}

::google::protobuf::uint8* Response_CheckUpdateStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.CheckUpdateStatusResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes platform_update_info = 2;
  if (has_platform_update_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->platform_update_info(), target);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.CheckUpdateStatusResponse)
  return target;
}

int Response_CheckUpdateStatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional bytes platform_update_info = 2;
    if (has_platform_update_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->platform_update_info());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_CheckUpdateStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_CheckUpdateStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_CheckUpdateStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_CheckUpdateStatusResponse::MergeFrom(const Response_CheckUpdateStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_platform_update_info()) {
      set_platform_update_info(from.platform_update_info());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_CheckUpdateStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_CheckUpdateStatusResponse::CopyFrom(const Response_CheckUpdateStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_CheckUpdateStatusResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_CheckUpdateStatusResponse::Swap(Response_CheckUpdateStatusResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(platform_update_info_, other->platform_update_info_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_CheckUpdateStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_CheckUpdateStatusResponse_descriptor_;
  metadata.reflection = Response_CheckUpdateStatusResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_CreateSessionResponse::kErrorCodeFieldNumber;
const int Response_CreateSessionResponse::kSessionIdFieldNumber;
const int Response_CreateSessionResponse::kSeDhMsg1FieldNumber;
#endif  // !_MSC_VER

Response_CreateSessionResponse::Response_CreateSessionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.CreateSessionResponse)
}

void Response_CreateSessionResponse::InitAsDefaultInstance() {
}

Response_CreateSessionResponse::Response_CreateSessionResponse(const Response_CreateSessionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.CreateSessionResponse)
}

void Response_CreateSessionResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  session_id_ = 0u;
  se_dh_msg1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_CreateSessionResponse::~Response_CreateSessionResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.CreateSessionResponse)
  SharedDtor();
}

void Response_CreateSessionResponse::SharedDtor() {
  if (se_dh_msg1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete se_dh_msg1_;
  }
  if (this != default_instance_) {
  }
}

void Response_CreateSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_CreateSessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_CreateSessionResponse_descriptor_;
}

const Response_CreateSessionResponse& Response_CreateSessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_CreateSessionResponse* Response_CreateSessionResponse::default_instance_ = NULL;

Response_CreateSessionResponse* Response_CreateSessionResponse::New() const {
  return new Response_CreateSessionResponse;
}

void Response_CreateSessionResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    errorcode_ = 1u;
    session_id_ = 0u;
    if (has_se_dh_msg1()) {
      if (se_dh_msg1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        se_dh_msg1_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_CreateSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.CreateSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional uint32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_se_dh_msg1;
        break;
      }

      // optional bytes se_dh_msg1 = 3;
      case 3: {
        if (tag == 26) {
         parse_se_dh_msg1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_se_dh_msg1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.CreateSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.CreateSessionResponse)
  return false;
#undef DO_
}

void Response_CreateSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.CreateSessionResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional uint32 session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // optional bytes se_dh_msg1 = 3;
  if (has_se_dh_msg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->se_dh_msg1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.CreateSessionResponse)
}

::google::protobuf::uint8* Response_CreateSessionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.CreateSessionResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional uint32 session_id = 2;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_id(), target);
  }

  // optional bytes se_dh_msg1 = 3;
  if (has_se_dh_msg1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->se_dh_msg1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.CreateSessionResponse)
  return target;
}

int Response_CreateSessionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional uint32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

    // optional bytes se_dh_msg1 = 3;
    if (has_se_dh_msg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->se_dh_msg1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_CreateSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_CreateSessionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_CreateSessionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_CreateSessionResponse::MergeFrom(const Response_CreateSessionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_se_dh_msg1()) {
      set_se_dh_msg1(from.se_dh_msg1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_CreateSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_CreateSessionResponse::CopyFrom(const Response_CreateSessionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_CreateSessionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_CreateSessionResponse::Swap(Response_CreateSessionResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(session_id_, other->session_id_);
    std::swap(se_dh_msg1_, other->se_dh_msg1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_CreateSessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_CreateSessionResponse_descriptor_;
  metadata.reflection = Response_CreateSessionResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_InvokeServiceResponse::kErrorCodeFieldNumber;
const int Response_InvokeServiceResponse::kPseMessageFieldNumber;
#endif  // !_MSC_VER

Response_InvokeServiceResponse::Response_InvokeServiceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.InvokeServiceResponse)
}

void Response_InvokeServiceResponse::InitAsDefaultInstance() {
}

Response_InvokeServiceResponse::Response_InvokeServiceResponse(const Response_InvokeServiceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.InvokeServiceResponse)
}

void Response_InvokeServiceResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  pse_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_InvokeServiceResponse::~Response_InvokeServiceResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.InvokeServiceResponse)
  SharedDtor();
}

void Response_InvokeServiceResponse::SharedDtor() {
  if (pse_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pse_message_;
  }
  if (this != default_instance_) {
  }
}

void Response_InvokeServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_InvokeServiceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_InvokeServiceResponse_descriptor_;
}

const Response_InvokeServiceResponse& Response_InvokeServiceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_InvokeServiceResponse* Response_InvokeServiceResponse::default_instance_ = NULL;

Response_InvokeServiceResponse* Response_InvokeServiceResponse::New() const {
  return new Response_InvokeServiceResponse;
}

void Response_InvokeServiceResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errorcode_ = 1u;
    if (has_pse_message()) {
      if (pse_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pse_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_InvokeServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.InvokeServiceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pse_message;
        break;
      }

      // optional bytes pse_message = 2;
      case 2: {
        if (tag == 18) {
         parse_pse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pse_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.InvokeServiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.InvokeServiceResponse)
  return false;
#undef DO_
}

void Response_InvokeServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.InvokeServiceResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes pse_message = 2;
  if (has_pse_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pse_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.InvokeServiceResponse)
}

::google::protobuf::uint8* Response_InvokeServiceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.InvokeServiceResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes pse_message = 2;
  if (has_pse_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pse_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.InvokeServiceResponse)
  return target;
}

int Response_InvokeServiceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional bytes pse_message = 2;
    if (has_pse_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pse_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_InvokeServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_InvokeServiceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_InvokeServiceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_InvokeServiceResponse::MergeFrom(const Response_InvokeServiceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_pse_message()) {
      set_pse_message(from.pse_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_InvokeServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_InvokeServiceResponse::CopyFrom(const Response_InvokeServiceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_InvokeServiceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_InvokeServiceResponse::Swap(Response_InvokeServiceResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(pse_message_, other->pse_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_InvokeServiceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_InvokeServiceResponse_descriptor_;
  metadata.reflection = Response_InvokeServiceResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_ExchangeReportResponse::kErrorCodeFieldNumber;
const int Response_ExchangeReportResponse::kSeDhMsg3FieldNumber;
#endif  // !_MSC_VER

Response_ExchangeReportResponse::Response_ExchangeReportResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.ExchangeReportResponse)
}

void Response_ExchangeReportResponse::InitAsDefaultInstance() {
}

Response_ExchangeReportResponse::Response_ExchangeReportResponse(const Response_ExchangeReportResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.ExchangeReportResponse)
}

void Response_ExchangeReportResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  se_dh_msg3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_ExchangeReportResponse::~Response_ExchangeReportResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.ExchangeReportResponse)
  SharedDtor();
}

void Response_ExchangeReportResponse::SharedDtor() {
  if (se_dh_msg3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete se_dh_msg3_;
  }
  if (this != default_instance_) {
  }
}

void Response_ExchangeReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_ExchangeReportResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_ExchangeReportResponse_descriptor_;
}

const Response_ExchangeReportResponse& Response_ExchangeReportResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_ExchangeReportResponse* Response_ExchangeReportResponse::default_instance_ = NULL;

Response_ExchangeReportResponse* Response_ExchangeReportResponse::New() const {
  return new Response_ExchangeReportResponse;
}

void Response_ExchangeReportResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errorcode_ = 1u;
    if (has_se_dh_msg3()) {
      if (se_dh_msg3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        se_dh_msg3_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_ExchangeReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.ExchangeReportResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_se_dh_msg3;
        break;
      }

      // optional bytes se_dh_msg3 = 2;
      case 2: {
        if (tag == 18) {
         parse_se_dh_msg3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_se_dh_msg3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.ExchangeReportResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.ExchangeReportResponse)
  return false;
#undef DO_
}

void Response_ExchangeReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.ExchangeReportResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes se_dh_msg3 = 2;
  if (has_se_dh_msg3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->se_dh_msg3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.ExchangeReportResponse)
}

::google::protobuf::uint8* Response_ExchangeReportResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.ExchangeReportResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes se_dh_msg3 = 2;
  if (has_se_dh_msg3()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->se_dh_msg3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.ExchangeReportResponse)
  return target;
}

int Response_ExchangeReportResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional bytes se_dh_msg3 = 2;
    if (has_se_dh_msg3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->se_dh_msg3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_ExchangeReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_ExchangeReportResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_ExchangeReportResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_ExchangeReportResponse::MergeFrom(const Response_ExchangeReportResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_se_dh_msg3()) {
      set_se_dh_msg3(from.se_dh_msg3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_ExchangeReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_ExchangeReportResponse::CopyFrom(const Response_ExchangeReportResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_ExchangeReportResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_ExchangeReportResponse::Swap(Response_ExchangeReportResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(se_dh_msg3_, other->se_dh_msg3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_ExchangeReportResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_ExchangeReportResponse_descriptor_;
  metadata.reflection = Response_ExchangeReportResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_CloseSessionResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

Response_CloseSessionResponse::Response_CloseSessionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.CloseSessionResponse)
}

void Response_CloseSessionResponse::InitAsDefaultInstance() {
}

Response_CloseSessionResponse::Response_CloseSessionResponse(const Response_CloseSessionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.CloseSessionResponse)
}

void Response_CloseSessionResponse::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_CloseSessionResponse::~Response_CloseSessionResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.CloseSessionResponse)
  SharedDtor();
}

void Response_CloseSessionResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_CloseSessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_CloseSessionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_CloseSessionResponse_descriptor_;
}

const Response_CloseSessionResponse& Response_CloseSessionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_CloseSessionResponse* Response_CloseSessionResponse::default_instance_ = NULL;

Response_CloseSessionResponse* Response_CloseSessionResponse::New() const {
  return new Response_CloseSessionResponse;
}

void Response_CloseSessionResponse::Clear() {
  errorcode_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_CloseSessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.CloseSessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.CloseSessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.CloseSessionResponse)
  return false;
#undef DO_
}

void Response_CloseSessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.CloseSessionResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.CloseSessionResponse)
}

::google::protobuf::uint8* Response_CloseSessionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.CloseSessionResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.CloseSessionResponse)
  return target;
}

int Response_CloseSessionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_CloseSessionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_CloseSessionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_CloseSessionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_CloseSessionResponse::MergeFrom(const Response_CloseSessionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_CloseSessionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_CloseSessionResponse::CopyFrom(const Response_CloseSessionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_CloseSessionResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_CloseSessionResponse::Swap(Response_CloseSessionResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_CloseSessionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_CloseSessionResponse_descriptor_;
  metadata.reflection = Response_CloseSessionResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetPsCapResponse::kErrorCodeFieldNumber;
const int Response_GetPsCapResponse::kPsCapFieldNumber;
#endif  // !_MSC_VER

Response_GetPsCapResponse::Response_GetPsCapResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetPsCapResponse)
}

void Response_GetPsCapResponse::InitAsDefaultInstance() {
}

Response_GetPsCapResponse::Response_GetPsCapResponse(const Response_GetPsCapResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetPsCapResponse)
}

void Response_GetPsCapResponse::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1u;
  ps_cap_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetPsCapResponse::~Response_GetPsCapResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetPsCapResponse)
  SharedDtor();
}

void Response_GetPsCapResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_GetPsCapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetPsCapResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetPsCapResponse_descriptor_;
}

const Response_GetPsCapResponse& Response_GetPsCapResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_GetPsCapResponse* Response_GetPsCapResponse::default_instance_ = NULL;

Response_GetPsCapResponse* Response_GetPsCapResponse::New() const {
  return new Response_GetPsCapResponse;
}

void Response_GetPsCapResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errorcode_ = 1u;
    ps_cap_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetPsCapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetPsCapResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ps_cap;
        break;
      }

      // optional uint64 ps_cap = 2;
      case 2: {
        if (tag == 16) {
         parse_ps_cap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ps_cap_)));
          set_has_ps_cap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetPsCapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetPsCapResponse)
  return false;
#undef DO_
}

void Response_GetPsCapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetPsCapResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional uint64 ps_cap = 2;
  if (has_ps_cap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ps_cap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetPsCapResponse)
}

::google::protobuf::uint8* Response_GetPsCapResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetPsCapResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional uint64 ps_cap = 2;
  if (has_ps_cap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ps_cap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetPsCapResponse)
  return target;
}

int Response_GetPsCapResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional uint64 ps_cap = 2;
    if (has_ps_cap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ps_cap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetPsCapResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetPsCapResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetPsCapResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetPsCapResponse::MergeFrom(const Response_GetPsCapResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_ps_cap()) {
      set_ps_cap(from.ps_cap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetPsCapResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetPsCapResponse::CopyFrom(const Response_GetPsCapResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetPsCapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_GetPsCapResponse::Swap(Response_GetPsCapResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(ps_cap_, other->ps_cap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetPsCapResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetPsCapResponse_descriptor_;
  metadata.reflection = Response_GetPsCapResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetWhiteListSizeResponse::kErrorCodeFieldNumber;
const int Response_GetWhiteListSizeResponse::kWhiteListSizeFieldNumber;
#endif  // !_MSC_VER

Response_GetWhiteListSizeResponse::Response_GetWhiteListSizeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetWhiteListSizeResponse)
}

void Response_GetWhiteListSizeResponse::InitAsDefaultInstance() {
}

Response_GetWhiteListSizeResponse::Response_GetWhiteListSizeResponse(const Response_GetWhiteListSizeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetWhiteListSizeResponse)
}

void Response_GetWhiteListSizeResponse::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1u;
  white_list_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetWhiteListSizeResponse::~Response_GetWhiteListSizeResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetWhiteListSizeResponse)
  SharedDtor();
}

void Response_GetWhiteListSizeResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_GetWhiteListSizeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetWhiteListSizeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetWhiteListSizeResponse_descriptor_;
}

const Response_GetWhiteListSizeResponse& Response_GetWhiteListSizeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_GetWhiteListSizeResponse* Response_GetWhiteListSizeResponse::default_instance_ = NULL;

Response_GetWhiteListSizeResponse* Response_GetWhiteListSizeResponse::New() const {
  return new Response_GetWhiteListSizeResponse;
}

void Response_GetWhiteListSizeResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errorcode_ = 1u;
    white_list_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetWhiteListSizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetWhiteListSizeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_white_list_size;
        break;
      }

      // optional uint32 white_list_size = 2;
      case 2: {
        if (tag == 16) {
         parse_white_list_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &white_list_size_)));
          set_has_white_list_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetWhiteListSizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetWhiteListSizeResponse)
  return false;
#undef DO_
}

void Response_GetWhiteListSizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetWhiteListSizeResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional uint32 white_list_size = 2;
  if (has_white_list_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->white_list_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetWhiteListSizeResponse)
}

::google::protobuf::uint8* Response_GetWhiteListSizeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetWhiteListSizeResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional uint32 white_list_size = 2;
  if (has_white_list_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->white_list_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetWhiteListSizeResponse)
  return target;
}

int Response_GetWhiteListSizeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional uint32 white_list_size = 2;
    if (has_white_list_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->white_list_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetWhiteListSizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetWhiteListSizeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetWhiteListSizeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetWhiteListSizeResponse::MergeFrom(const Response_GetWhiteListSizeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_white_list_size()) {
      set_white_list_size(from.white_list_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetWhiteListSizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetWhiteListSizeResponse::CopyFrom(const Response_GetWhiteListSizeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetWhiteListSizeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_GetWhiteListSizeResponse::Swap(Response_GetWhiteListSizeResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(white_list_size_, other->white_list_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetWhiteListSizeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetWhiteListSizeResponse_descriptor_;
  metadata.reflection = Response_GetWhiteListSizeResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetWhiteListResponse::kErrorCodeFieldNumber;
const int Response_GetWhiteListResponse::kWhiteListFieldNumber;
#endif  // !_MSC_VER

Response_GetWhiteListResponse::Response_GetWhiteListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetWhiteListResponse)
}

void Response_GetWhiteListResponse::InitAsDefaultInstance() {
}

Response_GetWhiteListResponse::Response_GetWhiteListResponse(const Response_GetWhiteListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetWhiteListResponse)
}

void Response_GetWhiteListResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  white_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetWhiteListResponse::~Response_GetWhiteListResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetWhiteListResponse)
  SharedDtor();
}

void Response_GetWhiteListResponse::SharedDtor() {
  if (white_list_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete white_list_;
  }
  if (this != default_instance_) {
  }
}

void Response_GetWhiteListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetWhiteListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetWhiteListResponse_descriptor_;
}

const Response_GetWhiteListResponse& Response_GetWhiteListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_GetWhiteListResponse* Response_GetWhiteListResponse::default_instance_ = NULL;

Response_GetWhiteListResponse* Response_GetWhiteListResponse::New() const {
  return new Response_GetWhiteListResponse;
}

void Response_GetWhiteListResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errorcode_ = 1u;
    if (has_white_list()) {
      if (white_list_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        white_list_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetWhiteListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetWhiteListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_white_list;
        break;
      }

      // optional bytes white_list = 2;
      case 2: {
        if (tag == 18) {
         parse_white_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_white_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetWhiteListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetWhiteListResponse)
  return false;
#undef DO_
}

void Response_GetWhiteListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetWhiteListResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes white_list = 2;
  if (has_white_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->white_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetWhiteListResponse)
}

::google::protobuf::uint8* Response_GetWhiteListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetWhiteListResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes white_list = 2;
  if (has_white_list()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->white_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetWhiteListResponse)
  return target;
}

int Response_GetWhiteListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional bytes white_list = 2;
    if (has_white_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->white_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetWhiteListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetWhiteListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetWhiteListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetWhiteListResponse::MergeFrom(const Response_GetWhiteListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_white_list()) {
      set_white_list(from.white_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetWhiteListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetWhiteListResponse::CopyFrom(const Response_GetWhiteListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetWhiteListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_GetWhiteListResponse::Swap(Response_GetWhiteListResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(white_list_, other->white_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetWhiteListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetWhiteListResponse_descriptor_;
  metadata.reflection = Response_GetWhiteListResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_SGXGetExtendedEpidGroupIdResponse::kErrorCodeFieldNumber;
const int Response_SGXGetExtendedEpidGroupIdResponse::kXGroupIdFieldNumber;
#endif  // !_MSC_VER

Response_SGXGetExtendedEpidGroupIdResponse::Response_SGXGetExtendedEpidGroupIdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
}

void Response_SGXGetExtendedEpidGroupIdResponse::InitAsDefaultInstance() {
}

Response_SGXGetExtendedEpidGroupIdResponse::Response_SGXGetExtendedEpidGroupIdResponse(const Response_SGXGetExtendedEpidGroupIdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
}

void Response_SGXGetExtendedEpidGroupIdResponse::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1u;
  x_group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_SGXGetExtendedEpidGroupIdResponse::~Response_SGXGetExtendedEpidGroupIdResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  SharedDtor();
}

void Response_SGXGetExtendedEpidGroupIdResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_SGXGetExtendedEpidGroupIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_SGXGetExtendedEpidGroupIdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_SGXGetExtendedEpidGroupIdResponse_descriptor_;
}

const Response_SGXGetExtendedEpidGroupIdResponse& Response_SGXGetExtendedEpidGroupIdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_SGXGetExtendedEpidGroupIdResponse* Response_SGXGetExtendedEpidGroupIdResponse::default_instance_ = NULL;

Response_SGXGetExtendedEpidGroupIdResponse* Response_SGXGetExtendedEpidGroupIdResponse::New() const {
  return new Response_SGXGetExtendedEpidGroupIdResponse;
}

void Response_SGXGetExtendedEpidGroupIdResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errorcode_ = 1u;
    x_group_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_SGXGetExtendedEpidGroupIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x_group_id;
        break;
      }

      // optional uint32 x_group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_x_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_group_id_)));
          set_has_x_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  return false;
#undef DO_
}

void Response_SGXGetExtendedEpidGroupIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional uint32 x_group_id = 2;
  if (has_x_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x_group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
}

::google::protobuf::uint8* Response_SGXGetExtendedEpidGroupIdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional uint32 x_group_id = 2;
  if (has_x_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x_group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.SGXGetExtendedEpidGroupIdResponse)
  return target;
}

int Response_SGXGetExtendedEpidGroupIdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional uint32 x_group_id = 2;
    if (has_x_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x_group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_SGXGetExtendedEpidGroupIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_SGXGetExtendedEpidGroupIdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_SGXGetExtendedEpidGroupIdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_SGXGetExtendedEpidGroupIdResponse::MergeFrom(const Response_SGXGetExtendedEpidGroupIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_x_group_id()) {
      set_x_group_id(from.x_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_SGXGetExtendedEpidGroupIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_SGXGetExtendedEpidGroupIdResponse::CopyFrom(const Response_SGXGetExtendedEpidGroupIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SGXGetExtendedEpidGroupIdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_SGXGetExtendedEpidGroupIdResponse::Swap(Response_SGXGetExtendedEpidGroupIdResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(x_group_id_, other->x_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_SGXGetExtendedEpidGroupIdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_SGXGetExtendedEpidGroupIdResponse_descriptor_;
  metadata.reflection = Response_SGXGetExtendedEpidGroupIdResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_SGXSwitchExtendedEpidGroupResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

Response_SGXSwitchExtendedEpidGroupResponse::Response_SGXSwitchExtendedEpidGroupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
}

void Response_SGXSwitchExtendedEpidGroupResponse::InitAsDefaultInstance() {
}

Response_SGXSwitchExtendedEpidGroupResponse::Response_SGXSwitchExtendedEpidGroupResponse(const Response_SGXSwitchExtendedEpidGroupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
}

void Response_SGXSwitchExtendedEpidGroupResponse::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_SGXSwitchExtendedEpidGroupResponse::~Response_SGXSwitchExtendedEpidGroupResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  SharedDtor();
}

void Response_SGXSwitchExtendedEpidGroupResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_SGXSwitchExtendedEpidGroupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_SGXSwitchExtendedEpidGroupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_SGXSwitchExtendedEpidGroupResponse_descriptor_;
}

const Response_SGXSwitchExtendedEpidGroupResponse& Response_SGXSwitchExtendedEpidGroupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_SGXSwitchExtendedEpidGroupResponse* Response_SGXSwitchExtendedEpidGroupResponse::default_instance_ = NULL;

Response_SGXSwitchExtendedEpidGroupResponse* Response_SGXSwitchExtendedEpidGroupResponse::New() const {
  return new Response_SGXSwitchExtendedEpidGroupResponse;
}

void Response_SGXSwitchExtendedEpidGroupResponse::Clear() {
  errorcode_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_SGXSwitchExtendedEpidGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  return false;
#undef DO_
}

void Response_SGXSwitchExtendedEpidGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
}

::google::protobuf::uint8* Response_SGXSwitchExtendedEpidGroupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.SGXSwitchExtendedEpidGroupResponse)
  return target;
}

int Response_SGXSwitchExtendedEpidGroupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_SGXSwitchExtendedEpidGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_SGXSwitchExtendedEpidGroupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_SGXSwitchExtendedEpidGroupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_SGXSwitchExtendedEpidGroupResponse::MergeFrom(const Response_SGXSwitchExtendedEpidGroupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_SGXSwitchExtendedEpidGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_SGXSwitchExtendedEpidGroupResponse::CopyFrom(const Response_SGXSwitchExtendedEpidGroupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SGXSwitchExtendedEpidGroupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_SGXSwitchExtendedEpidGroupResponse::Swap(Response_SGXSwitchExtendedEpidGroupResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_SGXSwitchExtendedEpidGroupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_SGXSwitchExtendedEpidGroupResponse_descriptor_;
  metadata.reflection = Response_SGXSwitchExtendedEpidGroupResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_SGXRegisterResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

Response_SGXRegisterResponse::Response_SGXRegisterResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.SGXRegisterResponse)
}

void Response_SGXRegisterResponse::InitAsDefaultInstance() {
}

Response_SGXRegisterResponse::Response_SGXRegisterResponse(const Response_SGXRegisterResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.SGXRegisterResponse)
}

void Response_SGXRegisterResponse::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_SGXRegisterResponse::~Response_SGXRegisterResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.SGXRegisterResponse)
  SharedDtor();
}

void Response_SGXRegisterResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_SGXRegisterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_SGXRegisterResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_SGXRegisterResponse_descriptor_;
}

const Response_SGXRegisterResponse& Response_SGXRegisterResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_SGXRegisterResponse* Response_SGXRegisterResponse::default_instance_ = NULL;

Response_SGXRegisterResponse* Response_SGXRegisterResponse::New() const {
  return new Response_SGXRegisterResponse;
}

void Response_SGXRegisterResponse::Clear() {
  errorcode_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_SGXRegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.SGXRegisterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.SGXRegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.SGXRegisterResponse)
  return false;
#undef DO_
}

void Response_SGXRegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.SGXRegisterResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.SGXRegisterResponse)
}

::google::protobuf::uint8* Response_SGXRegisterResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.SGXRegisterResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.SGXRegisterResponse)
  return target;
}

int Response_SGXRegisterResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_SGXRegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_SGXRegisterResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_SGXRegisterResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_SGXRegisterResponse::MergeFrom(const Response_SGXRegisterResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_SGXRegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_SGXRegisterResponse::CopyFrom(const Response_SGXRegisterResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SGXRegisterResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_SGXRegisterResponse::Swap(Response_SGXRegisterResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_SGXRegisterResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_SGXRegisterResponse_descriptor_;
  metadata.reflection = Response_SGXRegisterResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_SelectAttKeyIDResponse::kErrorCodeFieldNumber;
const int Response_SelectAttKeyIDResponse::kSelectedAttKeyIdFieldNumber;
#endif  // !_MSC_VER

Response_SelectAttKeyIDResponse::Response_SelectAttKeyIDResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.SelectAttKeyIDResponse)
}

void Response_SelectAttKeyIDResponse::InitAsDefaultInstance() {
}

Response_SelectAttKeyIDResponse::Response_SelectAttKeyIDResponse(const Response_SelectAttKeyIDResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.SelectAttKeyIDResponse)
}

void Response_SelectAttKeyIDResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  selected_att_key_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_SelectAttKeyIDResponse::~Response_SelectAttKeyIDResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.SelectAttKeyIDResponse)
  SharedDtor();
}

void Response_SelectAttKeyIDResponse::SharedDtor() {
  if (selected_att_key_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete selected_att_key_id_;
  }
  if (this != default_instance_) {
  }
}

void Response_SelectAttKeyIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_SelectAttKeyIDResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_SelectAttKeyIDResponse_descriptor_;
}

const Response_SelectAttKeyIDResponse& Response_SelectAttKeyIDResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_SelectAttKeyIDResponse* Response_SelectAttKeyIDResponse::default_instance_ = NULL;

Response_SelectAttKeyIDResponse* Response_SelectAttKeyIDResponse::New() const {
  return new Response_SelectAttKeyIDResponse;
}

void Response_SelectAttKeyIDResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errorcode_ = 1u;
    if (has_selected_att_key_id()) {
      if (selected_att_key_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        selected_att_key_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_SelectAttKeyIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.SelectAttKeyIDResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_selected_att_key_id;
        break;
      }

      // optional bytes selected_att_key_id = 2;
      case 2: {
        if (tag == 18) {
         parse_selected_att_key_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_selected_att_key_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.SelectAttKeyIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.SelectAttKeyIDResponse)
  return false;
#undef DO_
}

void Response_SelectAttKeyIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.SelectAttKeyIDResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes selected_att_key_id = 2;
  if (has_selected_att_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->selected_att_key_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.SelectAttKeyIDResponse)
}

::google::protobuf::uint8* Response_SelectAttKeyIDResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.SelectAttKeyIDResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes selected_att_key_id = 2;
  if (has_selected_att_key_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->selected_att_key_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.SelectAttKeyIDResponse)
  return target;
}

int Response_SelectAttKeyIDResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional bytes selected_att_key_id = 2;
    if (has_selected_att_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->selected_att_key_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_SelectAttKeyIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_SelectAttKeyIDResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_SelectAttKeyIDResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_SelectAttKeyIDResponse::MergeFrom(const Response_SelectAttKeyIDResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_selected_att_key_id()) {
      set_selected_att_key_id(from.selected_att_key_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_SelectAttKeyIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_SelectAttKeyIDResponse::CopyFrom(const Response_SelectAttKeyIDResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_SelectAttKeyIDResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_SelectAttKeyIDResponse::Swap(Response_SelectAttKeyIDResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(selected_att_key_id_, other->selected_att_key_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_SelectAttKeyIDResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_SelectAttKeyIDResponse_descriptor_;
  metadata.reflection = Response_SelectAttKeyIDResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_InitQuoteExResponse::kErrorCodeFieldNumber;
const int Response_InitQuoteExResponse::kTargetInfoFieldNumber;
const int Response_InitQuoteExResponse::kPubKeyIdSizeFieldNumber;
const int Response_InitQuoteExResponse::kPubKeyIdFieldNumber;
#endif  // !_MSC_VER

Response_InitQuoteExResponse::Response_InitQuoteExResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.InitQuoteExResponse)
}

void Response_InitQuoteExResponse::InitAsDefaultInstance() {
}

Response_InitQuoteExResponse::Response_InitQuoteExResponse(const Response_InitQuoteExResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.InitQuoteExResponse)
}

void Response_InitQuoteExResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  target_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pub_key_id_size_ = GOOGLE_ULONGLONG(0);
  pub_key_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_InitQuoteExResponse::~Response_InitQuoteExResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.InitQuoteExResponse)
  SharedDtor();
}

void Response_InitQuoteExResponse::SharedDtor() {
  if (target_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_info_;
  }
  if (pub_key_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pub_key_id_;
  }
  if (this != default_instance_) {
  }
}

void Response_InitQuoteExResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_InitQuoteExResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_InitQuoteExResponse_descriptor_;
}

const Response_InitQuoteExResponse& Response_InitQuoteExResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_InitQuoteExResponse* Response_InitQuoteExResponse::default_instance_ = NULL;

Response_InitQuoteExResponse* Response_InitQuoteExResponse::New() const {
  return new Response_InitQuoteExResponse;
}

void Response_InitQuoteExResponse::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    errorcode_ = 1u;
    if (has_target_info()) {
      if (target_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_info_->clear();
      }
    }
    pub_key_id_size_ = GOOGLE_ULONGLONG(0);
    if (has_pub_key_id()) {
      if (pub_key_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pub_key_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_InitQuoteExResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.InitQuoteExResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target_info;
        break;
      }

      // optional bytes target_info = 2;
      case 2: {
        if (tag == 18) {
         parse_target_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_target_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pub_key_id_size;
        break;
      }

      // optional uint64 pub_key_id_size = 3;
      case 3: {
        if (tag == 24) {
         parse_pub_key_id_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pub_key_id_size_)));
          set_has_pub_key_id_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pub_key_id;
        break;
      }

      // optional bytes pub_key_id = 4;
      case 4: {
        if (tag == 34) {
         parse_pub_key_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pub_key_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.InitQuoteExResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.InitQuoteExResponse)
  return false;
#undef DO_
}

void Response_InitQuoteExResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.InitQuoteExResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes target_info = 2;
  if (has_target_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->target_info(), output);
  }

  // optional uint64 pub_key_id_size = 3;
  if (has_pub_key_id_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pub_key_id_size(), output);
  }

  // optional bytes pub_key_id = 4;
  if (has_pub_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pub_key_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.InitQuoteExResponse)
}

::google::protobuf::uint8* Response_InitQuoteExResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.InitQuoteExResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes target_info = 2;
  if (has_target_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->target_info(), target);
  }

  // optional uint64 pub_key_id_size = 3;
  if (has_pub_key_id_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pub_key_id_size(), target);
  }

  // optional bytes pub_key_id = 4;
  if (has_pub_key_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pub_key_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.InitQuoteExResponse)
  return target;
}

int Response_InitQuoteExResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional bytes target_info = 2;
    if (has_target_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->target_info());
    }

    // optional uint64 pub_key_id_size = 3;
    if (has_pub_key_id_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pub_key_id_size());
    }

    // optional bytes pub_key_id = 4;
    if (has_pub_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pub_key_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_InitQuoteExResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_InitQuoteExResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_InitQuoteExResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_InitQuoteExResponse::MergeFrom(const Response_InitQuoteExResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_target_info()) {
      set_target_info(from.target_info());
    }
    if (from.has_pub_key_id_size()) {
      set_pub_key_id_size(from.pub_key_id_size());
    }
    if (from.has_pub_key_id()) {
      set_pub_key_id(from.pub_key_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_InitQuoteExResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_InitQuoteExResponse::CopyFrom(const Response_InitQuoteExResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_InitQuoteExResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_InitQuoteExResponse::Swap(Response_InitQuoteExResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(target_info_, other->target_info_);
    std::swap(pub_key_id_size_, other->pub_key_id_size_);
    std::swap(pub_key_id_, other->pub_key_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_InitQuoteExResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_InitQuoteExResponse_descriptor_;
  metadata.reflection = Response_InitQuoteExResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetQuoteSizeExResponse::kErrorCodeFieldNumber;
const int Response_GetQuoteSizeExResponse::kQuoteSizeFieldNumber;
#endif  // !_MSC_VER

Response_GetQuoteSizeExResponse::Response_GetQuoteSizeExResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetQuoteSizeExResponse)
}

void Response_GetQuoteSizeExResponse::InitAsDefaultInstance() {
}

Response_GetQuoteSizeExResponse::Response_GetQuoteSizeExResponse(const Response_GetQuoteSizeExResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetQuoteSizeExResponse)
}

void Response_GetQuoteSizeExResponse::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 1u;
  quote_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetQuoteSizeExResponse::~Response_GetQuoteSizeExResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetQuoteSizeExResponse)
  SharedDtor();
}

void Response_GetQuoteSizeExResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Response_GetQuoteSizeExResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetQuoteSizeExResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetQuoteSizeExResponse_descriptor_;
}

const Response_GetQuoteSizeExResponse& Response_GetQuoteSizeExResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_GetQuoteSizeExResponse* Response_GetQuoteSizeExResponse::default_instance_ = NULL;

Response_GetQuoteSizeExResponse* Response_GetQuoteSizeExResponse::New() const {
  return new Response_GetQuoteSizeExResponse;
}

void Response_GetQuoteSizeExResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errorcode_ = 1u;
    quote_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetQuoteSizeExResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetQuoteSizeExResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_quote_size;
        break;
      }

      // optional uint32 quote_size = 2;
      case 2: {
        if (tag == 16) {
         parse_quote_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quote_size_)));
          set_has_quote_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetQuoteSizeExResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetQuoteSizeExResponse)
  return false;
#undef DO_
}

void Response_GetQuoteSizeExResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetQuoteSizeExResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional uint32 quote_size = 2;
  if (has_quote_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quote_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetQuoteSizeExResponse)
}

::google::protobuf::uint8* Response_GetQuoteSizeExResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetQuoteSizeExResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional uint32 quote_size = 2;
  if (has_quote_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quote_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetQuoteSizeExResponse)
  return target;
}

int Response_GetQuoteSizeExResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional uint32 quote_size = 2;
    if (has_quote_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quote_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetQuoteSizeExResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetQuoteSizeExResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetQuoteSizeExResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetQuoteSizeExResponse::MergeFrom(const Response_GetQuoteSizeExResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_quote_size()) {
      set_quote_size(from.quote_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetQuoteSizeExResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetQuoteSizeExResponse::CopyFrom(const Response_GetQuoteSizeExResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetQuoteSizeExResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_GetQuoteSizeExResponse::Swap(Response_GetQuoteSizeExResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(quote_size_, other->quote_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetQuoteSizeExResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetQuoteSizeExResponse_descriptor_;
  metadata.reflection = Response_GetQuoteSizeExResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response_GetQuoteExResponse::kErrorCodeFieldNumber;
const int Response_GetQuoteExResponse::kQuoteFieldNumber;
const int Response_GetQuoteExResponse::kQeReportInfoFieldNumber;
#endif  // !_MSC_VER

Response_GetQuoteExResponse::Response_GetQuoteExResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response.GetQuoteExResponse)
}

void Response_GetQuoteExResponse::InitAsDefaultInstance() {
}

Response_GetQuoteExResponse::Response_GetQuoteExResponse(const Response_GetQuoteExResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response.GetQuoteExResponse)
}

void Response_GetQuoteExResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorcode_ = 1u;
  quote_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qe_report_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response_GetQuoteExResponse::~Response_GetQuoteExResponse() {
  // @@protoc_insertion_point(destructor:aesm.message.Response.GetQuoteExResponse)
  SharedDtor();
}

void Response_GetQuoteExResponse::SharedDtor() {
  if (quote_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quote_;
  }
  if (qe_report_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qe_report_info_;
  }
  if (this != default_instance_) {
  }
}

void Response_GetQuoteExResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response_GetQuoteExResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_GetQuoteExResponse_descriptor_;
}

const Response_GetQuoteExResponse& Response_GetQuoteExResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response_GetQuoteExResponse* Response_GetQuoteExResponse::default_instance_ = NULL;

Response_GetQuoteExResponse* Response_GetQuoteExResponse::New() const {
  return new Response_GetQuoteExResponse;
}

void Response_GetQuoteExResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    errorcode_ = 1u;
    if (has_quote()) {
      if (quote_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quote_->clear();
      }
    }
    if (has_qe_report_info()) {
      if (qe_report_info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        qe_report_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response_GetQuoteExResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response.GetQuoteExResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_quote;
        break;
      }

      // optional bytes quote = 2;
      case 2: {
        if (tag == 18) {
         parse_quote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quote()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_qe_report_info;
        break;
      }

      // optional bytes qe_report_info = 3;
      case 3: {
        if (tag == 26) {
         parse_qe_report_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qe_report_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response.GetQuoteExResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response.GetQuoteExResponse)
  return false;
#undef DO_
}

void Response_GetQuoteExResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response.GetQuoteExResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // optional bytes quote = 2;
  if (has_quote()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->quote(), output);
  }

  // optional bytes qe_report_info = 3;
  if (has_qe_report_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->qe_report_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response.GetQuoteExResponse)
}

::google::protobuf::uint8* Response_GetQuoteExResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response.GetQuoteExResponse)
  // required uint32 errorCode = 1 [default = 1];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // optional bytes quote = 2;
  if (has_quote()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->quote(), target);
  }

  // optional bytes qe_report_info = 3;
  if (has_qe_report_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->qe_report_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response.GetQuoteExResponse)
  return target;
}

int Response_GetQuoteExResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1 [default = 1];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional bytes quote = 2;
    if (has_quote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->quote());
    }

    // optional bytes qe_report_info = 3;
    if (has_qe_report_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->qe_report_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response_GetQuoteExResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response_GetQuoteExResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response_GetQuoteExResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response_GetQuoteExResponse::MergeFrom(const Response_GetQuoteExResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_quote()) {
      set_quote(from.quote());
    }
    if (from.has_qe_report_info()) {
      set_qe_report_info(from.qe_report_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response_GetQuoteExResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_GetQuoteExResponse::CopyFrom(const Response_GetQuoteExResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_GetQuoteExResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Response_GetQuoteExResponse::Swap(Response_GetQuoteExResponse* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(quote_, other->quote_);
    std::swap(qe_report_info_, other->qe_report_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response_GetQuoteExResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_GetQuoteExResponse_descriptor_;
  metadata.reflection = Response_GetQuoteExResponse_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Response::kInitQuoteResFieldNumber;
const int Response::kGetQuoteResFieldNumber;
const int Response::kGetLicTokenResFieldNumber;
const int Response::kReportErrResFieldNumber;
const int Response::kCreateSessionResFieldNumber;
const int Response::kInvokeServiceResFieldNumber;
const int Response::kExchangeReportResFieldNumber;
const int Response::kCloseSessionResFieldNumber;
const int Response::kGetPsCapResFieldNumber;
const int Response::kGetWhiteListSizeResFieldNumber;
const int Response::kGetWhiteListResFieldNumber;
const int Response::kSgxGetExtendedEpidGroupIdResFieldNumber;
const int Response::kSgxSwitchExtendedEpidGroupResFieldNumber;
const int Response::kSgxRegisterResFieldNumber;
const int Response::kInitQuoteExResFieldNumber;
const int Response::kGetQuoteSizeExResFieldNumber;
const int Response::kGetQuoteExResFieldNumber;
const int Response::kCheckUpdateStatusResFieldNumber;
const int Response::kSelectAttKeyIDResFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:aesm.message.Response)
}

void Response::InitAsDefaultInstance() {
  initquoteres_ = const_cast< ::aesm::message::Response_InitQuoteResponse*>(&::aesm::message::Response_InitQuoteResponse::default_instance());
  getquoteres_ = const_cast< ::aesm::message::Response_GetQuoteResponse*>(&::aesm::message::Response_GetQuoteResponse::default_instance());
  getlictokenres_ = const_cast< ::aesm::message::Response_GetLaunchTokenResponse*>(&::aesm::message::Response_GetLaunchTokenResponse::default_instance());
  reporterrres_ = const_cast< ::aesm::message::Response_ReportAttestationErrorResponse*>(&::aesm::message::Response_ReportAttestationErrorResponse::default_instance());
  createsessionres_ = const_cast< ::aesm::message::Response_CreateSessionResponse*>(&::aesm::message::Response_CreateSessionResponse::default_instance());
  invokeserviceres_ = const_cast< ::aesm::message::Response_InvokeServiceResponse*>(&::aesm::message::Response_InvokeServiceResponse::default_instance());
  exchangereportres_ = const_cast< ::aesm::message::Response_ExchangeReportResponse*>(&::aesm::message::Response_ExchangeReportResponse::default_instance());
  closesessionres_ = const_cast< ::aesm::message::Response_CloseSessionResponse*>(&::aesm::message::Response_CloseSessionResponse::default_instance());
  getpscapres_ = const_cast< ::aesm::message::Response_GetPsCapResponse*>(&::aesm::message::Response_GetPsCapResponse::default_instance());
  getwhitelistsizeres_ = const_cast< ::aesm::message::Response_GetWhiteListSizeResponse*>(&::aesm::message::Response_GetWhiteListSizeResponse::default_instance());
  getwhitelistres_ = const_cast< ::aesm::message::Response_GetWhiteListResponse*>(&::aesm::message::Response_GetWhiteListResponse::default_instance());
  sgxgetextendedepidgroupidres_ = const_cast< ::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse*>(&::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse::default_instance());
  sgxswitchextendedepidgroupres_ = const_cast< ::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse*>(&::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse::default_instance());
  sgxregisterres_ = const_cast< ::aesm::message::Response_SGXRegisterResponse*>(&::aesm::message::Response_SGXRegisterResponse::default_instance());
  initquoteexres_ = const_cast< ::aesm::message::Response_InitQuoteExResponse*>(&::aesm::message::Response_InitQuoteExResponse::default_instance());
  getquotesizeexres_ = const_cast< ::aesm::message::Response_GetQuoteSizeExResponse*>(&::aesm::message::Response_GetQuoteSizeExResponse::default_instance());
  getquoteexres_ = const_cast< ::aesm::message::Response_GetQuoteExResponse*>(&::aesm::message::Response_GetQuoteExResponse::default_instance());
  checkupdatestatusres_ = const_cast< ::aesm::message::Response_CheckUpdateStatusResponse*>(&::aesm::message::Response_CheckUpdateStatusResponse::default_instance());
  selectattkeyidres_ = const_cast< ::aesm::message::Response_SelectAttKeyIDResponse*>(&::aesm::message::Response_SelectAttKeyIDResponse::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:aesm.message.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  initquoteres_ = NULL;
  getquoteres_ = NULL;
  getlictokenres_ = NULL;
  reporterrres_ = NULL;
  createsessionres_ = NULL;
  invokeserviceres_ = NULL;
  exchangereportres_ = NULL;
  closesessionres_ = NULL;
  getpscapres_ = NULL;
  getwhitelistsizeres_ = NULL;
  getwhitelistres_ = NULL;
  sgxgetextendedepidgroupidres_ = NULL;
  sgxswitchextendedepidgroupres_ = NULL;
  sgxregisterres_ = NULL;
  initquoteexres_ = NULL;
  getquotesizeexres_ = NULL;
  getquoteexres_ = NULL;
  checkupdatestatusres_ = NULL;
  selectattkeyidres_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:aesm.message.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete initquoteres_;
    delete getquoteres_;
    delete getlictokenres_;
    delete reporterrres_;
    delete createsessionres_;
    delete invokeserviceres_;
    delete exchangereportres_;
    delete closesessionres_;
    delete getpscapres_;
    delete getwhitelistsizeres_;
    delete getwhitelistres_;
    delete sgxgetextendedepidgroupidres_;
    delete sgxswitchextendedepidgroupres_;
    delete sgxregisterres_;
    delete initquoteexres_;
    delete getquotesizeexres_;
    delete getquoteexres_;
    delete checkupdatestatusres_;
    delete selectattkeyidres_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_initquoteres()) {
      if (initquoteres_ != NULL) initquoteres_->::aesm::message::Response_InitQuoteResponse::Clear();
    }
    if (has_getquoteres()) {
      if (getquoteres_ != NULL) getquoteres_->::aesm::message::Response_GetQuoteResponse::Clear();
    }
    if (has_getlictokenres()) {
      if (getlictokenres_ != NULL) getlictokenres_->::aesm::message::Response_GetLaunchTokenResponse::Clear();
    }
    if (has_reporterrres()) {
      if (reporterrres_ != NULL) reporterrres_->::aesm::message::Response_ReportAttestationErrorResponse::Clear();
    }
    if (has_createsessionres()) {
      if (createsessionres_ != NULL) createsessionres_->::aesm::message::Response_CreateSessionResponse::Clear();
    }
    if (has_invokeserviceres()) {
      if (invokeserviceres_ != NULL) invokeserviceres_->::aesm::message::Response_InvokeServiceResponse::Clear();
    }
    if (has_exchangereportres()) {
      if (exchangereportres_ != NULL) exchangereportres_->::aesm::message::Response_ExchangeReportResponse::Clear();
    }
    if (has_closesessionres()) {
      if (closesessionres_ != NULL) closesessionres_->::aesm::message::Response_CloseSessionResponse::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_getpscapres()) {
      if (getpscapres_ != NULL) getpscapres_->::aesm::message::Response_GetPsCapResponse::Clear();
    }
    if (has_getwhitelistsizeres()) {
      if (getwhitelistsizeres_ != NULL) getwhitelistsizeres_->::aesm::message::Response_GetWhiteListSizeResponse::Clear();
    }
    if (has_getwhitelistres()) {
      if (getwhitelistres_ != NULL) getwhitelistres_->::aesm::message::Response_GetWhiteListResponse::Clear();
    }
    if (has_sgxgetextendedepidgroupidres()) {
      if (sgxgetextendedepidgroupidres_ != NULL) sgxgetextendedepidgroupidres_->::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse::Clear();
    }
    if (has_sgxswitchextendedepidgroupres()) {
      if (sgxswitchextendedepidgroupres_ != NULL) sgxswitchextendedepidgroupres_->::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse::Clear();
    }
    if (has_sgxregisterres()) {
      if (sgxregisterres_ != NULL) sgxregisterres_->::aesm::message::Response_SGXRegisterResponse::Clear();
    }
    if (has_initquoteexres()) {
      if (initquoteexres_ != NULL) initquoteexres_->::aesm::message::Response_InitQuoteExResponse::Clear();
    }
    if (has_getquotesizeexres()) {
      if (getquotesizeexres_ != NULL) getquotesizeexres_->::aesm::message::Response_GetQuoteSizeExResponse::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 458752) {
    if (has_getquoteexres()) {
      if (getquoteexres_ != NULL) getquoteexres_->::aesm::message::Response_GetQuoteExResponse::Clear();
    }
    if (has_checkupdatestatusres()) {
      if (checkupdatestatusres_ != NULL) checkupdatestatusres_->::aesm::message::Response_CheckUpdateStatusResponse::Clear();
    }
    if (has_selectattkeyidres()) {
      if (selectattkeyidres_ != NULL) selectattkeyidres_->::aesm::message::Response_SelectAttKeyIDResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aesm.message.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initquoteres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_getQuoteRes;
        break;
      }

      // optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
      case 2: {
        if (tag == 18) {
         parse_getQuoteRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getquoteres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_getLicTokenRes;
        break;
      }

      // optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
      case 3: {
        if (tag == 26) {
         parse_getLicTokenRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getlictokenres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reportErrRes;
        break;
      }

      // optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
      case 4: {
        if (tag == 34) {
         parse_reportErrRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reporterrres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_createSessionRes;
        break;
      }

      // optional .aesm.message.Response.CreateSessionResponse createSessionRes = 5;
      case 5: {
        if (tag == 42) {
         parse_createSessionRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createsessionres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_invokeServiceRes;
        break;
      }

      // optional .aesm.message.Response.InvokeServiceResponse invokeServiceRes = 6;
      case 6: {
        if (tag == 50) {
         parse_invokeServiceRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invokeserviceres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_exchangeReportRes;
        break;
      }

      // optional .aesm.message.Response.ExchangeReportResponse exchangeReportRes = 7;
      case 7: {
        if (tag == 58) {
         parse_exchangeReportRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exchangereportres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_closeSessionRes;
        break;
      }

      // optional .aesm.message.Response.CloseSessionResponse closeSessionRes = 8;
      case 8: {
        if (tag == 66) {
         parse_closeSessionRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closesessionres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_getPsCapRes;
        break;
      }

      // optional .aesm.message.Response.GetPsCapResponse getPsCapRes = 9;
      case 9: {
        if (tag == 74) {
         parse_getPsCapRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getpscapres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_getWhiteListSizeRes;
        break;
      }

      // optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
      case 10: {
        if (tag == 82) {
         parse_getWhiteListSizeRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getwhitelistsizeres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_getWhiteListRes;
        break;
      }

      // optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
      case 11: {
        if (tag == 90) {
         parse_getWhiteListRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getwhitelistres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sgxGetExtendedEpidGroupIdRes;
        break;
      }

      // optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
      case 12: {
        if (tag == 98) {
         parse_sgxGetExtendedEpidGroupIdRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgxgetextendedepidgroupidres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_sgxSwitchExtendedEpidGroupRes;
        break;
      }

      // optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
      case 13: {
        if (tag == 106) {
         parse_sgxSwitchExtendedEpidGroupRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgxswitchextendedepidgroupres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_sgxRegisterRes;
        break;
      }

      // optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
      case 14: {
        if (tag == 114) {
         parse_sgxRegisterRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgxregisterres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_initQuoteExRes;
        break;
      }

      // optional .aesm.message.Response.InitQuoteExResponse initQuoteExRes = 15;
      case 15: {
        if (tag == 122) {
         parse_initQuoteExRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initquoteexres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_getQuoteSizeExRes;
        break;
      }

      // optional .aesm.message.Response.GetQuoteSizeExResponse getQuoteSizeExRes = 16;
      case 16: {
        if (tag == 130) {
         parse_getQuoteSizeExRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getquotesizeexres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_getQuoteExRes;
        break;
      }

      // optional .aesm.message.Response.GetQuoteExResponse getQuoteExRes = 17;
      case 17: {
        if (tag == 138) {
         parse_getQuoteExRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getquoteexres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_checkUpdateStatusRes;
        break;
      }

      // optional .aesm.message.Response.CheckUpdateStatusResponse checkUpdateStatusRes = 18;
      case 18: {
        if (tag == 146) {
         parse_checkUpdateStatusRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_checkupdatestatusres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_selectAttKeyIDRes;
        break;
      }

      // optional .aesm.message.Response.SelectAttKeyIDResponse selectAttKeyIDRes = 19;
      case 19: {
        if (tag == 154) {
         parse_selectAttKeyIDRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selectattkeyidres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aesm.message.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aesm.message.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aesm.message.Response)
  // optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
  if (has_initquoteres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->initquoteres(), output);
  }

  // optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
  if (has_getquoteres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->getquoteres(), output);
  }

  // optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
  if (has_getlictokenres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->getlictokenres(), output);
  }

  // optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
  if (has_reporterrres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reporterrres(), output);
  }

  // optional .aesm.message.Response.CreateSessionResponse createSessionRes = 5;
  if (has_createsessionres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->createsessionres(), output);
  }

  // optional .aesm.message.Response.InvokeServiceResponse invokeServiceRes = 6;
  if (has_invokeserviceres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->invokeserviceres(), output);
  }

  // optional .aesm.message.Response.ExchangeReportResponse exchangeReportRes = 7;
  if (has_exchangereportres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->exchangereportres(), output);
  }

  // optional .aesm.message.Response.CloseSessionResponse closeSessionRes = 8;
  if (has_closesessionres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->closesessionres(), output);
  }

  // optional .aesm.message.Response.GetPsCapResponse getPsCapRes = 9;
  if (has_getpscapres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->getpscapres(), output);
  }

  // optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
  if (has_getwhitelistsizeres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->getwhitelistsizeres(), output);
  }

  // optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
  if (has_getwhitelistres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->getwhitelistres(), output);
  }

  // optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
  if (has_sgxgetextendedepidgroupidres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->sgxgetextendedepidgroupidres(), output);
  }

  // optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
  if (has_sgxswitchextendedepidgroupres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->sgxswitchextendedepidgroupres(), output);
  }

  // optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
  if (has_sgxregisterres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->sgxregisterres(), output);
  }

  // optional .aesm.message.Response.InitQuoteExResponse initQuoteExRes = 15;
  if (has_initquoteexres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->initquoteexres(), output);
  }

  // optional .aesm.message.Response.GetQuoteSizeExResponse getQuoteSizeExRes = 16;
  if (has_getquotesizeexres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->getquotesizeexres(), output);
  }

  // optional .aesm.message.Response.GetQuoteExResponse getQuoteExRes = 17;
  if (has_getquoteexres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->getquoteexres(), output);
  }

  // optional .aesm.message.Response.CheckUpdateStatusResponse checkUpdateStatusRes = 18;
  if (has_checkupdatestatusres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->checkupdatestatusres(), output);
  }

  // optional .aesm.message.Response.SelectAttKeyIDResponse selectAttKeyIDRes = 19;
  if (has_selectattkeyidres()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->selectattkeyidres(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:aesm.message.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:aesm.message.Response)
  // optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
  if (has_initquoteres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->initquoteres(), target);
  }

  // optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
  if (has_getquoteres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->getquoteres(), target);
  }

  // optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
  if (has_getlictokenres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->getlictokenres(), target);
  }

  // optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
  if (has_reporterrres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reporterrres(), target);
  }

  // optional .aesm.message.Response.CreateSessionResponse createSessionRes = 5;
  if (has_createsessionres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->createsessionres(), target);
  }

  // optional .aesm.message.Response.InvokeServiceResponse invokeServiceRes = 6;
  if (has_invokeserviceres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->invokeserviceres(), target);
  }

  // optional .aesm.message.Response.ExchangeReportResponse exchangeReportRes = 7;
  if (has_exchangereportres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->exchangereportres(), target);
  }

  // optional .aesm.message.Response.CloseSessionResponse closeSessionRes = 8;
  if (has_closesessionres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->closesessionres(), target);
  }

  // optional .aesm.message.Response.GetPsCapResponse getPsCapRes = 9;
  if (has_getpscapres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->getpscapres(), target);
  }

  // optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
  if (has_getwhitelistsizeres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->getwhitelistsizeres(), target);
  }

  // optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
  if (has_getwhitelistres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->getwhitelistres(), target);
  }

  // optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
  if (has_sgxgetextendedepidgroupidres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->sgxgetextendedepidgroupidres(), target);
  }

  // optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
  if (has_sgxswitchextendedepidgroupres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->sgxswitchextendedepidgroupres(), target);
  }

  // optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
  if (has_sgxregisterres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->sgxregisterres(), target);
  }

  // optional .aesm.message.Response.InitQuoteExResponse initQuoteExRes = 15;
  if (has_initquoteexres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->initquoteexres(), target);
  }

  // optional .aesm.message.Response.GetQuoteSizeExResponse getQuoteSizeExRes = 16;
  if (has_getquotesizeexres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->getquotesizeexres(), target);
  }

  // optional .aesm.message.Response.GetQuoteExResponse getQuoteExRes = 17;
  if (has_getquoteexres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->getquoteexres(), target);
  }

  // optional .aesm.message.Response.CheckUpdateStatusResponse checkUpdateStatusRes = 18;
  if (has_checkupdatestatusres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->checkupdatestatusres(), target);
  }

  // optional .aesm.message.Response.SelectAttKeyIDResponse selectAttKeyIDRes = 19;
  if (has_selectattkeyidres()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->selectattkeyidres(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aesm.message.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .aesm.message.Response.InitQuoteResponse initQuoteRes = 1;
    if (has_initquoteres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initquoteres());
    }

    // optional .aesm.message.Response.GetQuoteResponse getQuoteRes = 2;
    if (has_getquoteres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getquoteres());
    }

    // optional .aesm.message.Response.GetLaunchTokenResponse getLicTokenRes = 3;
    if (has_getlictokenres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getlictokenres());
    }

    // optional .aesm.message.Response.ReportAttestationErrorResponse reportErrRes = 4;
    if (has_reporterrres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reporterrres());
    }

    // optional .aesm.message.Response.CreateSessionResponse createSessionRes = 5;
    if (has_createsessionres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->createsessionres());
    }

    // optional .aesm.message.Response.InvokeServiceResponse invokeServiceRes = 6;
    if (has_invokeserviceres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invokeserviceres());
    }

    // optional .aesm.message.Response.ExchangeReportResponse exchangeReportRes = 7;
    if (has_exchangereportres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exchangereportres());
    }

    // optional .aesm.message.Response.CloseSessionResponse closeSessionRes = 8;
    if (has_closesessionres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->closesessionres());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .aesm.message.Response.GetPsCapResponse getPsCapRes = 9;
    if (has_getpscapres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getpscapres());
    }

    // optional .aesm.message.Response.GetWhiteListSizeResponse getWhiteListSizeRes = 10;
    if (has_getwhitelistsizeres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getwhitelistsizeres());
    }

    // optional .aesm.message.Response.GetWhiteListResponse getWhiteListRes = 11;
    if (has_getwhitelistres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getwhitelistres());
    }

    // optional .aesm.message.Response.SGXGetExtendedEpidGroupIdResponse sgxGetExtendedEpidGroupIdRes = 12;
    if (has_sgxgetextendedepidgroupidres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sgxgetextendedepidgroupidres());
    }

    // optional .aesm.message.Response.SGXSwitchExtendedEpidGroupResponse sgxSwitchExtendedEpidGroupRes = 13;
    if (has_sgxswitchextendedepidgroupres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sgxswitchextendedepidgroupres());
    }

    // optional .aesm.message.Response.SGXRegisterResponse sgxRegisterRes = 14;
    if (has_sgxregisterres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sgxregisterres());
    }

    // optional .aesm.message.Response.InitQuoteExResponse initQuoteExRes = 15;
    if (has_initquoteexres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initquoteexres());
    }

    // optional .aesm.message.Response.GetQuoteSizeExResponse getQuoteSizeExRes = 16;
    if (has_getquotesizeexres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getquotesizeexres());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .aesm.message.Response.GetQuoteExResponse getQuoteExRes = 17;
    if (has_getquoteexres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getquoteexres());
    }

    // optional .aesm.message.Response.CheckUpdateStatusResponse checkUpdateStatusRes = 18;
    if (has_checkupdatestatusres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->checkupdatestatusres());
    }

    // optional .aesm.message.Response.SelectAttKeyIDResponse selectAttKeyIDRes = 19;
    if (has_selectattkeyidres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selectattkeyidres());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initquoteres()) {
      mutable_initquoteres()->::aesm::message::Response_InitQuoteResponse::MergeFrom(from.initquoteres());
    }
    if (from.has_getquoteres()) {
      mutable_getquoteres()->::aesm::message::Response_GetQuoteResponse::MergeFrom(from.getquoteres());
    }
    if (from.has_getlictokenres()) {
      mutable_getlictokenres()->::aesm::message::Response_GetLaunchTokenResponse::MergeFrom(from.getlictokenres());
    }
    if (from.has_reporterrres()) {
      mutable_reporterrres()->::aesm::message::Response_ReportAttestationErrorResponse::MergeFrom(from.reporterrres());
    }
    if (from.has_createsessionres()) {
      mutable_createsessionres()->::aesm::message::Response_CreateSessionResponse::MergeFrom(from.createsessionres());
    }
    if (from.has_invokeserviceres()) {
      mutable_invokeserviceres()->::aesm::message::Response_InvokeServiceResponse::MergeFrom(from.invokeserviceres());
    }
    if (from.has_exchangereportres()) {
      mutable_exchangereportres()->::aesm::message::Response_ExchangeReportResponse::MergeFrom(from.exchangereportres());
    }
    if (from.has_closesessionres()) {
      mutable_closesessionres()->::aesm::message::Response_CloseSessionResponse::MergeFrom(from.closesessionres());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_getpscapres()) {
      mutable_getpscapres()->::aesm::message::Response_GetPsCapResponse::MergeFrom(from.getpscapres());
    }
    if (from.has_getwhitelistsizeres()) {
      mutable_getwhitelistsizeres()->::aesm::message::Response_GetWhiteListSizeResponse::MergeFrom(from.getwhitelistsizeres());
    }
    if (from.has_getwhitelistres()) {
      mutable_getwhitelistres()->::aesm::message::Response_GetWhiteListResponse::MergeFrom(from.getwhitelistres());
    }
    if (from.has_sgxgetextendedepidgroupidres()) {
      mutable_sgxgetextendedepidgroupidres()->::aesm::message::Response_SGXGetExtendedEpidGroupIdResponse::MergeFrom(from.sgxgetextendedepidgroupidres());
    }
    if (from.has_sgxswitchextendedepidgroupres()) {
      mutable_sgxswitchextendedepidgroupres()->::aesm::message::Response_SGXSwitchExtendedEpidGroupResponse::MergeFrom(from.sgxswitchextendedepidgroupres());
    }
    if (from.has_sgxregisterres()) {
      mutable_sgxregisterres()->::aesm::message::Response_SGXRegisterResponse::MergeFrom(from.sgxregisterres());
    }
    if (from.has_initquoteexres()) {
      mutable_initquoteexres()->::aesm::message::Response_InitQuoteExResponse::MergeFrom(from.initquoteexres());
    }
    if (from.has_getquotesizeexres()) {
      mutable_getquotesizeexres()->::aesm::message::Response_GetQuoteSizeExResponse::MergeFrom(from.getquotesizeexres());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_getquoteexres()) {
      mutable_getquoteexres()->::aesm::message::Response_GetQuoteExResponse::MergeFrom(from.getquoteexres());
    }
    if (from.has_checkupdatestatusres()) {
      mutable_checkupdatestatusres()->::aesm::message::Response_CheckUpdateStatusResponse::MergeFrom(from.checkupdatestatusres());
    }
    if (from.has_selectattkeyidres()) {
      mutable_selectattkeyidres()->::aesm::message::Response_SelectAttKeyIDResponse::MergeFrom(from.selectattkeyidres());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  if (has_initquoteres()) {
    if (!this->initquoteres().IsInitialized()) return false;
  }
  if (has_getquoteres()) {
    if (!this->getquoteres().IsInitialized()) return false;
  }
  if (has_getlictokenres()) {
    if (!this->getlictokenres().IsInitialized()) return false;
  }
  if (has_reporterrres()) {
    if (!this->reporterrres().IsInitialized()) return false;
  }
  if (has_createsessionres()) {
    if (!this->createsessionres().IsInitialized()) return false;
  }
  if (has_invokeserviceres()) {
    if (!this->invokeserviceres().IsInitialized()) return false;
  }
  if (has_exchangereportres()) {
    if (!this->exchangereportres().IsInitialized()) return false;
  }
  if (has_closesessionres()) {
    if (!this->closesessionres().IsInitialized()) return false;
  }
  if (has_getpscapres()) {
    if (!this->getpscapres().IsInitialized()) return false;
  }
  if (has_getwhitelistsizeres()) {
    if (!this->getwhitelistsizeres().IsInitialized()) return false;
  }
  if (has_getwhitelistres()) {
    if (!this->getwhitelistres().IsInitialized()) return false;
  }
  if (has_sgxgetextendedepidgroupidres()) {
    if (!this->sgxgetextendedepidgroupidres().IsInitialized()) return false;
  }
  if (has_sgxswitchextendedepidgroupres()) {
    if (!this->sgxswitchextendedepidgroupres().IsInitialized()) return false;
  }
  if (has_sgxregisterres()) {
    if (!this->sgxregisterres().IsInitialized()) return false;
  }
  if (has_initquoteexres()) {
    if (!this->initquoteexres().IsInitialized()) return false;
  }
  if (has_getquotesizeexres()) {
    if (!this->getquotesizeexres().IsInitialized()) return false;
  }
  if (has_getquoteexres()) {
    if (!this->getquoteexres().IsInitialized()) return false;
  }
  if (has_checkupdatestatusres()) {
    if (!this->checkupdatestatusres().IsInitialized()) return false;
  }
  if (has_selectattkeyidres()) {
    if (!this->selectattkeyidres().IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(initquoteres_, other->initquoteres_);
    std::swap(getquoteres_, other->getquoteres_);
    std::swap(getlictokenres_, other->getlictokenres_);
    std::swap(reporterrres_, other->reporterrres_);
    std::swap(createsessionres_, other->createsessionres_);
    std::swap(invokeserviceres_, other->invokeserviceres_);
    std::swap(exchangereportres_, other->exchangereportres_);
    std::swap(closesessionres_, other->closesessionres_);
    std::swap(getpscapres_, other->getpscapres_);
    std::swap(getwhitelistsizeres_, other->getwhitelistsizeres_);
    std::swap(getwhitelistres_, other->getwhitelistres_);
    std::swap(sgxgetextendedepidgroupidres_, other->sgxgetextendedepidgroupidres_);
    std::swap(sgxswitchextendedepidgroupres_, other->sgxswitchextendedepidgroupres_);
    std::swap(sgxregisterres_, other->sgxregisterres_);
    std::swap(initquoteexres_, other->initquoteexres_);
    std::swap(getquotesizeexres_, other->getquotesizeexres_);
    std::swap(getquoteexres_, other->getquoteexres_);
    std::swap(checkupdatestatusres_, other->checkupdatestatusres_);
    std::swap(selectattkeyidres_, other->selectattkeyidres_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace aesm

// @@protoc_insertion_point(global_scope)
